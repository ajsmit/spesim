% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pp_strauss_fast.R
\name{simulate_points_strauss_fast}
\alias{simulate_points_strauss_fast}
\title{Fast Strauss simulator on a polygon (fixed-n, MH relocation)}
\usage{
simulate_points_strauss_fast(
  domain,
  n_target,
  r,
  gamma,
  sweeps = 2000,
  burnin = 200,
  thin = 1
)
}
\arguments{
\item{domain}{An \pkg{sf} polygon/multipolygon defining the window.}

\item{n_target}{Integer; the fixed number of points.}

\item{r}{Interaction radius (map units).}

\item{gamma}{Inhibition in \eqn{(0,1]}; \eqn{<1} yields inhibition, \eqn{=1} reduces to CSR with relocation.}

\item{sweeps}{Total MH sweeps; each sweep proposes \eqn{\approx n} moves.}

\item{burnin}{Burn-in sweeps (currently not retained; final state is returned).}

\item{thin}{Thinning interval (not used to average—final state is returned).}
}
\value{
An \pkg{sf} POINT layer with columns \code{x}, \code{y} as geometry.
}
\description{
Simulate \eqn{n} points from a Strauss process \emph{conditioned on \eqn{n}}
inside an \pkg{sf} polygon using a fast C++ Metropolis–Hastings kernel:
at each step, randomly pick a point and propose a new uniform location;
accept with probability \eqn{\min(1, \gamma^{\Delta s})}, where
\eqn{\Delta s} is the change in the number of neighbor pairs within radius \eqn{r}.
The implementation uses a spatial hash for \eqn{O(1)} expected neighbor lookups.
}
