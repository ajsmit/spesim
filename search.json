[{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Inside the Advanced Analysis Panel","text":"generate_advanced_panel() compiles compact, multi-plot summary simulation. designed teaching quick diagnostics. vignette explains component, computed, patterns look . Enable via P$ADVANCED_ANALYSIS = TRUE call function directly results list.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"whats-included","dir":"Articles","previous_headings":"","what":"What’s included","title":"Inside the Advanced Analysis Panel","text":"Rank–Abundance (SAD) — Observed vs. theoretical Fisher log-series. Occupancy–Abundance — Total abundance vs. number occupied sites. Species–Area (specaccum) — Mean richness variation vs. sampled area. Distance–Decay — Sørensen dissimilarity vs. geographic distance. Rarefaction — Expected richness vs. sample size per site. (spatstat tooling installed environment, can optionally add point-process diagnostics; see “Extensions” section.)","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Inside the Advanced Analysis Panel","text":"","code":"library(spesim) P <- load_config(system.file(\"examples/spesim_init_complete.txt\", package = \"spesim\")) P$ADVANCED_ANALYSIS <- TRUE res <- run_spatial_simulation(P = P, write_outputs = FALSE) generate_advanced_panel(res)"},{"path":[]},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"rankabundance-distribution-sad","dir":"Articles","previous_headings":"Panels in detail","what":"1) Rank–Abundance Distribution (SAD)","title":"Inside the Advanced Analysis Panel","text":"Observed: counts per species res$species_dist (points quadrats). Theoretical: Fisher’s log-series using FISHER_ALPHA, FISHER_X dominant fraction (species ). Interpretation: good match (log-scale) suggests realised abundances follow intended SAD; large departures imply strong spatial filtering small sample sizes.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"occupancyabundance","dir":"Articles","previous_headings":"Panels in detail","what":"2) Occupancy–Abundance","title":"Inside the Advanced Analysis Panel","text":"Data: site × species matrix (res$abund_matrix). Metric: TotalAbundance (column sum) vs. Occupancy (non-zero sites). Interpretation: Many systems show positive trend: common species occupy sites. Outliers (high abundance low occupancy) may habitat specialists spatially clumped species.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"speciesarea-specaccum","dir":"Articles","previous_headings":"Panels in detail","what":"3) Species–Area (specaccum)","title":"Inside the Advanced Analysis Panel","text":"Method: vegan::specaccum(..., method = \"random\") sites. Plot: Mean richness ±1 SD ribbon. Interpretation: Curves rise slowly suggest high redundancy; steep curves imply high heterogeneity/beta diversity.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"distancedecay","dir":"Articles","previous_headings":"Panels in detail","what":"4) Distance–Decay","title":"Inside the Advanced Analysis Panel","text":"Geography: Euclidean distance among quadrat centroids. Dissimilarity: Sørensen/Bray presence–absence. Interpretation: Positive slope → communities become different distance; reflects environmental turnover /dispersal limitation.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"rarefaction","dir":"Articles","previous_headings":"Panels in detail","what":"5) Rarefaction","title":"Inside the Advanced Analysis Panel","text":"Method: vegan::rarecurve site (quadrat). Interpretation: Compare richness equal sample sizes; plateauing curves suggest adequate sampling.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"extensions-optional","dir":"Articles","previous_headings":"","what":"Extensions (optional)","title":"Inside the Advanced Analysis Panel","text":"install spatstat.geom (optionally spatstat.explore), can extend diagnostics : Ripley’s K L(r)-r transforms Pair correlation g(r) help validate spatial point process (CSR, clustering, inhibition). Integrate similar plots alongside beneath default panel desired.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-advanced-panel.html","id":"reproducibility-notes","dir":"Articles","previous_headings":"","what":"Reproducibility notes","title":"Inside the Advanced Analysis Panel","text":"panel components deterministic functions res. SAR rarefaction, random permutations internal vegan; set set.seed() beforehand reproducibility re-run .","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Simulating Environmental Gradients with spesim","text":"vignette shows spesim builds environmental fields (e.g. temperature, elevation, rainfall) drive species responses , ultimately, spatial community structure. can use gradients purely visualisation filter species according optimum tolerance parameters supplied init file programmatically. Key functions: - create_sampling_domain() – makes irregular (organic) polygon use . - create_environmental_gradients() – generates gridded fields domain. - plot_spatial_sampling() – overlays species/quadrats (optionally) gradient.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"concept","dir":"Articles","previous_headings":"","what":"Concept","title":"Simulating Environmental Gradients with spesim","text":"Gradients generated regular grid spanning domain’s bounding box clipped/used nearest-neighbour joins points/quadrats. gradient normalised [0,1] internally also rescaled human-readable units reporting: temperature → temperature_C (≈ −2 28 °C default) elevation → elevation_m (0–2000 m) rainfall → rainfall_mm (200–900 mm) Species can assigned one named gradient optimum (peak response) tolerance (width) using Gaussian response.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"minimal-workflow","dir":"Articles","previous_headings":"","what":"Minimal workflow","title":"Simulating Environmental Gradients with spesim","text":"","code":"library(spesim) library(ggplot2)  # 1) Domain (use built-in irregular polygon) dom <- create_sampling_domain()  # 2) Make gradients (resolution = number of grid cells per axis) env <- create_environmental_gradients(dom, resolution = 60, noise_level = 0.05) head(env)  # x, y, temperature, elevation, rainfall and rescaled *_C/_m/_mm"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"visualising-a-gradient","dir":"Articles","previous_headings":"","what":"Visualising a gradient","title":"Simulating Environmental Gradients with spesim","text":"","code":"# Simple ggplot heat map of temperature_C ggplot(env, aes(x, y, fill = temperature_C)) +   geom_raster() +   coord_equal() +   scale_fill_viridis_c() +   labs(fill = \"°C\", title = \"Simulated temperature\") +   theme_minimal()"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"using-gradients-in-a-simulation","dir":"Articles","previous_headings":"","what":"Using gradients in a simulation","title":"Simulating Environmental Gradients with spesim","text":"two paths: init-file driven programmatic. resolve tidy P$GRADIENT table columns species, gradient, optimum, tol.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"a-init-file-driven","dir":"Articles","previous_headings":"Using gradients in a simulation","what":"A) Init-file driven","title":"Simulating Environmental Gradients with spesim","text":"Example (excerpt): Interpretation: - ,B respond temperature (opt 0.65, tol 0.12); - C responds elevation (opt 0.7); - D responds rainfall (opt 0.4).","code":"GRADIENT_SPECIES     = A,B,C,D GRADIENT_ASSIGNMENTS = temperature,temperature,elevation,rainfall GRADIENT_OPTIMA      = temperature:0.65, elevation:0.7, rainfall:0.4 GRADIENT_TOLERANCE   = 0.12 P <- load_config(system.file(\"examples/spesim_init_complete.txt\", package = \"spesim\")) res <- run_spatial_simulation(P = P, write_outputs = FALSE)"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"b-programmatic","dir":"Articles","previous_headings":"Using gradients in a simulation","what":"B) Programmatic","title":"Simulating Environmental Gradients with spesim","text":"","code":"P <- load_config(system.file(\"examples/spesim_init_basic.txt\", package = \"spesim\")) P$GRADIENT <- tibble::tibble(   species  = c(\"A\",\"B\",\"C\"),   gradient = c(\"temperature\",\"elevation\",\"rainfall\"),   optimum  = c(0.6, 0.7, 0.4),   tol      = c(0.12, 0.10, 0.15) ) res <- run_spatial_simulation(P = P, write_outputs = FALSE)"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"overlaying-in-the-map-panel","dir":"Articles","previous_headings":"","what":"Overlaying in the map panel","title":"Simulating Environmental Gradients with spesim","text":"","code":"# Show species/quadrats and a temperature overlay side-by-side p1 <- plot_spatial_sampling(res$domain, res$species_dist, res$quadrats, res$P) p2 <- plot_spatial_sampling(res$domain, res$species_dist, res$quadrats, res$P,                             show_gradient = TRUE, env_gradients = res$env_gradients,                             gradient_type = \"temperature_C\") p1 | p2"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"tips-knobs","dir":"Articles","previous_headings":"","what":"Tips & knobs","title":"Simulating Environmental Gradients with spesim","text":"resolution: higher values → smoother fields larger data. noise_level: adds small-scale heterogeneity; set 0 perfectly smooth gradients. Optima/tolerances accept named--gradient values (e.g., temperature:0.6) named--species values (e.g., :0.6, B:0.7) fine control. real rasters? Convert points pass join logic; adapt create_environmental_gradients() template.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-env-gradients.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Simulating Environmental Gradients with spesim","text":"“Species responding gradients”: confirm species labels P$GRADIENT match simulation’s species set (..). Check res$P$GRADIENT loading. “gradient overlay”: pass correct gradient_type name used data (temperature_C, elevation_m, rainfall_mm) plotting.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-init-parameters.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"spesim: Full Init File Parameters","text":"init file plain text configuration defines simulation parameters spesim. read load_config() can created manually adapted bundled examples. non-empty line KEY = value pair. Lines may include comments #, ignored. Keys case-insensitive; values can scalars vectors (see formats ). vignette lists recognised keys meanings, defaults, accepted formats, grouped purpose.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-init-parameters.html","id":"value-formats-accepted-by-the-parser","dir":"Articles","previous_headings":"Overview","what":"Value formats accepted by the parser","title":"spesim: Full Init File Parameters","text":"Scalar numbers strings: 77, 0.15, \"black\" Logical: TRUE, FALSE Comma-separated vectors: ,B,C 0.1, 0.2, 0.3 R-style vectors (multi‑line OK): c(, B, C) c(0.1, 0.2) Named single vector: :0.55 temperature:0.12, elevation:0.08 parameter allows multiple forms (e.g., per‑species per‑gradient), loader resolves automatically documented .","code":""},{"path":[]},{"path":[]},{"path":"https://ajsmit.github.io/spesim/articles/spesim-init-parameters.html","id":"environmental-filtering-gradients","dir":"Articles","previous_headings":"","what":"Environmental filtering (gradients)","title":"spesim: Full Init File Parameters","text":"Gradients normalized 0–1 scale internally reported interpretable units (°C, m, mm). Allowed gradient names temperature, elevation, rainfall. Resolution rules OPTIMA/TOLERANCE (priority order): named species → named gradient → vector length = |species| → vector length = |unique gradients| → scalar (recycled).","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/articles/spesim-init-parameters.html","id":"interspecific-interactions","dir":"Articles","previous_headings":"","what":"Interspecific interactions","title":"spesim: Full Init File Parameters","text":"Local neighborhood effects modify placement probabilities via distance‑limited multiplier. can configure interactions via separate file inline init file. INTERACTIONS_FILE INTERACTIONS_EDGELIST given, inline edgelist takes precedence. missing coefficients default 1.0. Quick inline example (inside init file):","code":"INTERACTION_RADIUS = 30 INTERACTIONS_EDGELIST = c(   \"A,B-D,0.8\",    # A suppresses B..D   \"C,A,1.2\",      # C facilitates A   \"E,*,0.95\",     # E suppresses everyone except E   \"H,B,D,G,0.7\",  # H suppresses a non‑contiguous set   \"J,B-D,H,0.6\"   # J suppresses a range plus a single )"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://ajsmit.github.io/spesim/articles/spesim-init-parameters.html","id":"obtaining-and-customising-a-complete-init-file","dir":"Articles","previous_headings":"","what":"Obtaining and customising a complete init file","title":"spesim: Full Init File Parameters","text":"package ships example init files. copy one working directory editing: can also programmatically tweak list returned load_config() write prefer keep configs version control.","code":"example_init <- system.file(\"examples\", \"spesim_init_complete.txt\", package = \"spesim\") file.copy(example_init, \"my_spesim_init.txt\")"},{"path":[]},{"path":"https://ajsmit.github.io/spesim/articles/spesim-init-parameters.html","id":"minimal-defaults-except-species-and-individuals","dir":"Articles","previous_headings":"Minimal and maximal examples","what":"Minimal (defaults except species and individuals)","title":"spesim: Full Init File Parameters","text":"","code":"SEED = 77 OUTPUT_PREFIX = \"out/run_min\" N_INDIVIDUALS = 1500 N_SPECIES = 12 SAMPLING_SCHEME = \"random\" N_QUADRATS = 20 QUADRAT_SIZE_OPTION = \"medium\""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-init-parameters.html","id":"maximal-showing-most-knobs","dir":"Articles","previous_headings":"Minimal and maximal examples","what":"Maximal (showing most knobs)","title":"spesim: Full Init File Parameters","text":"","code":"SEED = 123 OUTPUT_PREFIX = \"out/run_max\"  # Community size and SAD N_INDIVIDUALS = 3000 N_SPECIES = 14 DOMINANT_FRACTION = 0.28 FISHER_ALPHA = 3.5 FISHER_X = 0.96  # Gradients: B,C,D respond (two temp, one elevation) GRADIENT_SPECIES = c(B, C, D) GRADIENT_ASSIGNMENTS = c(temperature, temperature, elevation) GRADIENT_OPTIMA = temperature:0.60, elevation:0.35 GRADIENT_TOLERANCE = temperature:0.10, elevation:0.12 SAMPLING_RESOLUTION = 60 ENVIRONMENTAL_NOISE = 0.05  # Dominant clustering MAX_CLUSTERS_DOMINANT = 6 CLUSTER_SPREAD_DOMINANT = 3.2  # Interactions (inline or via file; inline takes precedence) INTERACTION_RADIUS = 30 INTERACTIONS_EDGELIST = c(   \"A,B-D,0.8\",   \"C,A,1.2\",   \"E,*,0.95\",   \"H,B,D,G,0.7\",   \"J,B-D,H,0.6\" ) # Alternatively: INTERACTIONS_FILE = \"interactions_edges.csv\"  # Sampling SAMPLING_SCHEME = \"transect\" N_TRANSECTS = 2 N_QUADRATS_PER_TRANSECT = 10 QUADRAT_SIZE_OPTION = \"large\" TRANSECT_ANGLE = 60 VORONOI_SEED_FACTOR = 12  # Aesthetics POINT_SIZE = 0.25 POINT_ALPHA = 0.9 QUADRAT_ALPHA = 0.07 BACKGROUND_COLOUR = \"white\" FOREGROUND_COLOUR = \"#22223b\" QUADRAT_COLOUR = \"black\"  # Output ADVANCED_ANALYSIS = TRUE"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"spesim: Defining Interspecific Interactions","text":"spesim, interspecific interactions encoded directed coefficient matrix \\(M\\) modifies local establishment probability within neighbourhood radius \\(r\\). Values < 1 represent net competitive effects (suppression); values > 1 represent net facilitative effects; 1 neutral. effective neighbourhood defined single global interaction radius map units simulation. can provide interactions two convenient ways: ) External CSV file referenced init file (simple spreadsheet‑friendly). B) Inline rules directly init file via INTERACTIONS_EDGELIST (extra files). run_spatial_simulation() automatically resolve interactions either key present init file. hood calls package loaders (e.g. load_interactions(), load_interactions_inline()) validates/prints resolved matrix.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"csv-format","dir":"Articles","previous_headings":"A) External CSV file","what":"CSV format","title":"spesim: Defining Interspecific Interactions","text":"Create CSV three columns, exact order: focal — single species label (..Z). neighbour — set species affected focal. field supports rich syntax (see ) inside one cell; contains commas, keep cell quoted CSV structure stays intact. value — numeric coefficient. < 1 = suppressive; > 1 = facilitative. Optional metadata row radius: put first row \"_RADIUS_\" focal, empty neighbour, numeric value set global neighbourhood radius (otherwise radius can set init file).","code":"focal,neighbour,value"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"allowed-neighbour-syntax-inside-the-single-neighbour-cell","dir":"Articles","previous_headings":"A) External CSV file","what":"Allowed neighbour syntax (inside the single neighbour cell)","title":"spesim: Defining Interspecific Interactions","text":"Single species: List (comma, pipe, semicolon): \"B,L\" \"B|L\" \"B;L\" Range: \"B-D\" expands B,C,D Wildcard: \"*\" means species except focal can mix : \"B-D,L\" Notes Neighbour strings live inside one CSV cell. use commas, quote cell (spreadsheets handle automatically). Effects directed. → B imply B → . pairs specified remain neutral (1.0).","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"example-csv","dir":"Articles","previous_headings":"A) External CSV file","what":"Example CSV","title":"spesim: Defining Interspecific Interactions","text":"(Inline # comments won’t preserved tools; keep commentary notes/vignette rather inside CSV.)","code":"focal,neighbour,value \"_RADIUS_\",\"\",30 A,\"B-D,L\",0.8      # A suppresses B,C,D,L C,\"A\",1.2          # C facilitates A E,\"*\",0.95         # E slightly suppresses everyone else (not E itself)"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"referencing-the-csv-in-your-init-file","dir":"Articles","previous_headings":"A) External CSV file","what":"Referencing the CSV in your init file","title":"spesim: Defining Interspecific Interactions","text":"Add line init file (paths can relative working directory): may also set radius init file instead CSV metadata row: supplied, init file value typically takes precedence (see function documentation exact precedence rules version).","code":"INTERACTIONS_FILE = \"path/to/interactions.csv\" INTERACTION_RADIUS = 30"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"b-inline-rules-in-the-init-file-interactions_edgelist","dir":"Articles","previous_headings":"","what":"B) Inline rules in the init file (INTERACTIONS_EDGELIST)","title":"spesim: Defining Interspecific Interactions","text":"can embed edgelist directly init file using character vector element one rule strict three‑field form (exactly two commas per rule): focal — single label (e.g. ). neighbour — accepts singles, ranges (B-D), lists commas (non‑contiguous sets), wildcard * (except focal). can mix ranges singles, e.g. B-D,H. value — numeric coefficient.","code":"focal,neighbour,value"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"minimal-example-init-file","dir":"Articles","previous_headings":"B) Inline rules in the init file (INTERACTIONS_EDGELIST)","what":"Minimal example (init file)","title":"spesim: Defining Interspecific Interactions","text":"","code":"# Distance threshold (0 disables the neighbourhood modifier) INTERACTION_RADIUS = 1.5  # Directed rules (exactly two commas per rule: focal , neighbour , value) INTERACTIONS_EDGELIST = c(   \"A,B-D,0.80\",      # A suppresses B..D   \"C,A,1.20\",        # C facilitates A   \"E,*,0.95\",        # E slightly suppresses everyone else (not E itself)   \"H,B,D,G,0.70\",    # H suppresses a non-contiguous set: B, D, G   \"J,B-D,H,0.60\"     # J suppresses B..D plus H (mix of range + single) )"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"semantics","dir":"Articles","previous_headings":"B) Inline rules in the init file (INTERACTIONS_EDGELIST)","what":"Semantics","title":"spesim: Defining Interspecific Interactions","text":"Rules directed. * expands every species except focal. include self‑effects, list focal explicitly neighbour set (e.g., \",,0.9\"). final matrix S×S S = N_SPECIES (..); missing pairs default 1.0. Labels outside .. ignored warning.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"quick-validation-preview","dir":"Articles","previous_headings":"B) Inline rules in the init file (INTERACTIONS_EDGELIST)","what":"Quick validation & preview","title":"spesim: Defining Interspecific Interactions","text":"default, run_spatial_simulation() validates pretty‑prints resolved interaction matrix: interactions_validate = TRUE — checks shape, names, finiteness. interactions_strict = TRUE — stop validation issues (else warn). interactions_print = TRUE — compact summary showing entries different 1.0. (function arguments; keep defaults unless want change behaviour programmatically.)","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"endtoend-usage","dir":"Articles","previous_headings":"","what":"End‑to‑end usage","title":"spesim: Defining Interspecific Interactions","text":"typical init file might include either CSV pointer inline edgelist (), plus usual simulation settings. example: run: runner : 1) load parameters interactions, 2) simulate landscape, 3) place quadrats, 4) build tables/figures, 5) validate/print interaction matrix (enabled), 6) write outputs /run_*timestamp*.","code":"# core sim SEED = 77 N_INDIVIDUALS = 2000 N_SPECIES = 10  # interactions — choose ONE of the following blocks  # A) External CSV # INTERACTIONS_FILE = \"inst/extdata/interactions.csv\" # INTERACTION_RADIUS = 30  # B) Inline rules INTERACTION_RADIUS = 1.5 INTERACTIONS_EDGELIST = c(   \"A,B-D,0.80\",   \"C,A,1.20\",   \"E,*,0.95\" ) library(spesim)  res <- run_spatial_simulation(   init_file = \"inst/examples/my_init.txt\",   output_prefix = \"out/run\" )"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-interactions.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"spesim: Defining Interspecific Interactions","text":"CSV neighbour cell split across columns — make sure cell quoted contains commas. Unexpected species labels — .. N_SPECIES used; others ignored warning. effect observed — set positive INTERACTION_RADIUS (0 turns neighbourhood modifier ), ensure rules differ 1.0. Matrix dimension warning — loader always produces S×S (S = N_SPECIES) matrix; individual CSV rows can partial, rest filled 1.0.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Point Processes in spesim: Options and Intuition","text":"spesim simulates point locations (individuals) within polygonal domain. simple ad hoc clustering dominant species available, can think patterns lens point processes. vignette gives conceptual tour practical guidance options currently supported easily emulated.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"why-point-processes","dir":"Articles","previous_headings":"","what":"Why point processes?","title":"Point Processes in spesim: Options and Intuition","text":"give tunable, interpretable controls clustering inhibition, mirroring mechanisms like limited dispersal, aggregation safe sites, competition space/resources.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"csr-complete-spatial-randomness","dir":"Articles","previous_headings":"Options in spesim","what":"1) CSR (Complete Spatial Randomness)","title":"Point Processes in spesim: Options and Intuition","text":": Homogeneous Poisson process. Effect: interaction; points independent. Use: Baseline want environmental filtering structure communities. spesim: default placement non-dominant species unless impose rules.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"dominant-species-clusters-fast-k-nn-heuristic","dir":"Articles","previous_headings":"Options in spesim","what":"2) Dominant-species clusters (fast k-NN heuristic)","title":"Point Processes in spesim: Options and Intuition","text":": Choose random cluster centres; draw others probability decaying distance. Controls: MAX_CLUSTERS_DOMINANT, CLUSTER_SPREAD_DOMINANT. Use: Strong aggregations one () dominant species.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"towards-process-models-conceptual-mapping","dir":"Articles","previous_headings":"Options in spesim","what":"3) Towards process models (conceptual mapping)","title":"Point Processes in spesim: Options and Intuition","text":"spesim avoids heavy dependencies, can emulate key behaviours: Neyman–Scott / Thomas: Parent–offspring clusters Gaussian spread.Approximation: Increase clusters, set spread; draw others around centres. Strauss (inhibition): Avoid placing points within radius r.Approximation: Rejection sampling new point falls within r prior points. Geyer saturation: Favour moderate clustering saturate local counts.Approximation: Weight neighbour counts within r, cap threshold. include simple, dependency-light heuristics capture patterns teaching. require exact inference simulation, pair spesim outputs spatstat outside package.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"quick-recipe","dir":"Articles","previous_headings":"","what":"Quick recipe","title":"Point Processes in spesim: Options and Intuition","text":"","code":"P <- load_config(system.file(\"examples/spesim_init_basic.txt\", package = \"spesim\"))  # Dominant clusters P$MAX_CLUSTERS_DOMINANT  <- 6 P$CLUSTER_SPREAD_DOMINANT <- 2.5  # Neutral for others; add interactions if desired P$INTERACTION_RADIUS <- 0  res <- run_spatial_simulation(P = P, write_outputs = FALSE)"},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"diagnostics-to-check-realism","dir":"Articles","previous_headings":"","what":"Diagnostics to check realism","title":"Point Processes in spesim: Options and Intuition","text":"Visual inspection maps. Pairwise distances nearest-neighbour histograms. Advanced panel (SAR steepness, distance–decay strength).","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"when-to-use-which","dir":"Articles","previous_headings":"","what":"When to use which?","title":"Point Processes in spesim: Options and Intuition","text":"CSR: null model; isolate effect environmental filtering. Clustering: dispersal limitation, microhabitat patches, facilitation. Inhibition: competition territory, strong negative biotic interactions.","code":""},{"path":"https://ajsmit.github.io/spesim/articles/spesim-point-processes.html","id":"notes-for-power-users","dir":"Articles","previous_headings":"","what":"Notes for power users","title":"Point Processes in spesim: Options and Intuition","text":"dominant-cluster routine deliberately fast (k-d tree nearest centres). can replace wrap generate_heterogeneous_distribution() process still use rest pipeline (quadrats, matrices, panels).","code":""},{"path":"https://ajsmit.github.io/spesim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"AJ Smit. Author, maintainer.","code":""},{"path":"https://ajsmit.github.io/spesim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smit (2025). spesim: Spatial Sampling Simulation Heterogeneous Ecological Communities. R package version 0.2.0, https://github.com/ajsmit/spesim.","code":"@Manual{,   title = {spesim: Spatial Sampling Simulation for Heterogeneous Ecological Communities},   author = {AJ Smit},   year = {2025},   note = {R package version 0.2.0},   url = {https://github.com/ajsmit/spesim}, }"},{"path":"https://ajsmit.github.io/spesim/index.html","id":"spesim-spatial-ecological-simulation-in-r","dir":"","previous_headings":"","what":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"AJ Smit contributors 2025-08-12","code":""},{"path":"https://ajsmit.github.io/spesim/index.html","id":"spesim-","dir":"","previous_headings":"","what":"spesim","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"spesim R package simulating, sampling, analysing spatially heterogeneous ecological communities irregular landscapes. ’s built teaching, methods testing, exploratory research biogeography community ecology. Generate individuals multiple species realistic species–abundance distributions (e.g., Fisher’s log-series dominant species). Impose environmental filtering (per‑species optima/tolerances named gradients). Add spatial structure (dominant clustering + optional interspecific neighbourhood effects). Sample flexible quadrat schemes (random, systematic, tiled, transect, Voronoi). Produce site × species matrices, per‑site environment summaries, diversity partitions (α, β, γ). Save publication‑quality maps optional advanced analysis panel (rank–abundance, occupancy–abundance, species–area, distance–decay, rarefaction). Write human‑readable text report explains happened.","code":""},{"path":"https://ajsmit.github.io/spesim/index.html","id":"why-spesim","dir":"","previous_headings":"","what":"Why spesim?","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"Teaching: make abstract ideas (environmental filtering, distance decay, β‑diversity) tangible quick simulations can show class. Methods development: prototype sampling designs (many quadrats? scheme?) test metrics going field. Exploration: stress‑test analyses known “truth” see robust inferences .","code":""},{"path":"https://ajsmit.github.io/spesim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"Development version GitHub: heavy spatstat dependency required core functionality. package relies common spatial/data/plotting libraries (see DESCRIPTION imports). Building optional pkgdown site locally? Use:","code":"# install.packages(\"remotes\") remotes::install_github(\"ajsmit/spesim\") # install.packages(\"pkgdown\") pkgdown::build_site()"},{"path":"https://ajsmit.github.io/spesim/index.html","id":"vignettes-online","dir":"","previous_headings":"","what":"Vignettes (online)","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"Interactions (neighbour effects) Full init-file parameters Environmental Gradients Advanced Analysis Panel Point processes reading GitHub site live, ’ll find sources vignettes/.","code":""},{"path":"https://ajsmit.github.io/spesim/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"can run simulation two ways: programmatically (-memory) using init file disk. latter convenient larger setups reproducibility, since access init file gives full bird’s eye view simulation parameters.","code":""},{"path":"https://ajsmit.github.io/spesim/index.html","id":"quick-start-programmatic","dir":"","previous_headings":"Quick start","what":"Quick start (programmatic)","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"minimal run write files (handy examples/CI).","code":"library(spesim)  # Load a complete example init, then tweak a few things in-memory P <- load_config(system.file(\"examples/spesim_init_basic.txt\", package = \"spesim\")) P$N_SPECIES <- 10 P$N_INDIVIDUALS <- 2000 P$SAMPLING_SCHEME <- \"random\" P$N_QUADRATS <- 20 P$QUADRAT_SIZE_OPTION <- \"medium\"  # Run (skip writing to disk to keep examples snappy) res <- run_spatial_simulation(P = P, write_outputs = FALSE)  # One-map view: individuals + quadrats (no gradient fill) p <- plot_spatial_sampling(res$domain, res$species_dist, res$quadrats, res$P) print(p)  # Optional: a 2×2 panel including gradient overlays p1 <- plot_spatial_sampling(res$domain, res$species_dist, res$quadrats, res$P) p2 <- plot_spatial_sampling(res$domain, res$species_dist, res$quadrats, res$P,                             show_gradient = TRUE, env_gradients = res$env_gradients, gradient_type = \"temperature_C\") p3 <- plot_spatial_sampling(res$domain, res$species_dist, res$quadrats, res$P,                             show_gradient = TRUE, env_gradients = res$env_gradients, gradient_type = \"elevation_m\") p4 <- plot_spatial_sampling(res$domain, res$species_dist, res$quadrats, res$P,                             show_gradient = TRUE, env_gradients = res$env_gradients, gradient_type = \"rainfall_mm\") (p1 | p2) / (p3 | p4)"},{"path":"https://ajsmit.github.io/spesim/index.html","id":"quick-start-init-file-on-disk","dir":"","previous_headings":"Quick start","what":"Quick start (init file on disk)","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"Prefer declaring everything text file? Point run_spatial_simulation() :","code":"library(spesim)  # Your own config on disk init <- \"inst/examples/spesim_init_complete.txt\"   # or a path you created  # Optional: interactions resolved within the init (via INTERACTIONS_EDGELIST) #          or via a separate interactions file set here: # interactions <- \"inst/examples/interactions_init.txt\"  res <- run_spatial_simulation(   init_file = init,   interactions_file = NULL,  # use inline settings if present   output_prefix = \"out/demo\",    write_outputs = TRUE       # write CSVs, figures, report )  # Outputs written under out/demo_<timestamp>* # Results also returned in 'res' for programmatic use: str(res$abund_matrix)"},{"path":"https://ajsmit.github.io/spesim/index.html","id":"typical-workflow","dir":"","previous_headings":"","what":"Typical workflow","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"Set parameters: either init file (see vignette) -memory (load_config() → edit fields). Run simulator: run_spatial_simulation(). res$abund_matrix (site × species), res$site_coords (quadrat centroids), res$env_gradients (grid temp/elev/rain fields), map(s) via plot_spatial_sampling(). (Optional) Advanced panel: enable P$ADVANCED_ANALYSIS <- TRUE want multi‑plot diagnostic image written disk.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/index.html","id":"interactions-neighbour-effects","dir":"","previous_headings":"","what":"Interactions (neighbour effects)","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"can specify interspecific effects inline init file via simple CSV edgelist. See dedicated vignette: https://ajsmit.github.io/spesim/articles/spesim-interactions.html Key points: Rules directed (-> B may differ B -> ). Default neutral (1.0); list deviations. Set global INTERACTION_RADIUS (0 disables modifier).","code":""},{"path":"https://ajsmit.github.io/spesim/index.html","id":"environmental-gradients","dir":"","previous_headings":"","what":"Environmental gradients","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"Three synthetic gradients available ---box (temperature, elevation, rainfall), normalised [0,1] reported common units plots/reports. can control per-species optima tolerances scalars, vectors (species), named gradient. See init-file vignette: https://ajsmit.github.io/spesim/articles/spesim-init-parameters.html quick look generated grid:","code":"domain <- create_sampling_domain() env <- create_environmental_gradients(domain, resolution = 50, noise_level = 0.05) head(env)"},{"path":"https://ajsmit.github.io/spesim/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"use spesim, please cite:","code":"@misc{spesim,   author = {AJ Smit},   title  = {spesim: Spatial Ecological Simulation in R},   year   = {2025},   url    = {https://github.com/ajsmit/spesim} }"},{"path":"https://ajsmit.github.io/spesim/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Spatial Sampling Simulation for Heterogeneous Ecological Communities","text":"MIT License — see LICENSE.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_distance_decay.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance-Decay Data — calculate_distance_decay","title":"Distance-Decay Data — calculate_distance_decay","text":"Pair geographic distances sites community dissimilarities (Sorensen index computed binary Bray-Curtis) distance-decay plots.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_distance_decay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance-Decay Data — calculate_distance_decay","text":"","code":"calculate_distance_decay(abund_matrix, site_coords)"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_distance_decay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance-Decay Data — calculate_distance_decay","text":"abund_matrix site x species abundance data frame first column site remaining columns abundances. site_coords data frame numeric columns x y giving site coordinates (projected CRS) row order abund_matrix.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_distance_decay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance-Decay Data — calculate_distance_decay","text":"data frame two numeric columns: Distance Euclidean distance site pairs. Dissimilarity Sorensen dissimilarity (0-1).","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/calculate_distance_decay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance-Decay Data — calculate_distance_decay","text":"","code":"if (FALSE) { # \\dontrun{ dd <- calculate_distance_decay(abund_matrix, site_coords) head(dd) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_occupancy_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Occupancy-Abundance Table — calculate_occupancy_abundance","title":"Occupancy-Abundance Table — calculate_occupancy_abundance","text":"Summarise total abundance site occupancy (number sites non-zero counts) species site x species matrix.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_occupancy_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occupancy-Abundance Table — calculate_occupancy_abundance","text":"","code":"calculate_occupancy_abundance(abund_matrix)"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_occupancy_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Occupancy-Abundance Table — calculate_occupancy_abundance","text":"abund_matrix data frame first column site (site / quadrat identifier) remaining columns species abundances (non-negative integers).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_occupancy_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Occupancy-Abundance Table — calculate_occupancy_abundance","text":"data frame columns: Species Species (column) name. TotalAbundance Column sum across sites. Occupancy Number sites abundance \\(> 0\\).","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/calculate_occupancy_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Occupancy-Abundance Table — calculate_occupancy_abundance","text":"","code":"if (FALSE) { # \\dontrun{ oa <- calculate_occupancy_abundance(abund_matrix) head(oa) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_quadrat_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise mean environmental conditions per quadrat — calculate_quadrat_environment","title":"Summarise mean environmental conditions per quadrat — calculate_quadrat_environment","text":"Converts gridded environmental table (env_grid) sf point layer, joins quadrat polygons, computes per‑quadrat mean values (temperature, elevation, rainfall). Quadrats overlapping grid points retained returned NA means.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_quadrat_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise mean environmental conditions per quadrat — calculate_quadrat_environment","text":"","code":"calculate_quadrat_environment(env_grid, quadrats, domain_crs)"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_quadrat_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise mean environmental conditions per quadrat — calculate_quadrat_environment","text":"env_grid regular (irregular) data frame numeric columns x, y giving point coordinates, environmental columns temperature_C, elevation_m, rainfall_mm. Coordinates assumed CRS specified domain_crs. quadrats sf POLYGON (MULTIPOLYGON) layer quadrat_id column. Must CRS domain_crs. domain_crs coordinate reference system env_grid points. Can integer EPSG code, PROJ4string/WKT, sf crs object. CRS match quadrats.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_quadrat_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise mean environmental conditions per quadrat — calculate_quadrat_environment","text":"data.frame one row per quadrat columns: site, temperature_C, elevation_m, rainfall_mm. Means numeric; sites overlapping points NA environmental columns.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_quadrat_environment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise mean environmental conditions per quadrat — calculate_quadrat_environment","text":"function: converts env_grid sf points via st_as_sf using coords = c(\"x\",\"y\"), performs spatial join st_join points quadrats (default predicate: st_intersects), groups quadrat_id returns mean environmental variable (na.rm = TRUE), left‑joins back full set quadrats keep empty sites. prefer different join logic (e.g., nearest neighbour), adapt join call specify different predicate use st_nearest_feature.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_quadrat_environment.html","id":"crs","dir":"Reference","previous_headings":"","what":"CRS","title":"Summarise mean environmental conditions per quadrat — calculate_quadrat_environment","text":"env_grid interpreted domain_crs; quadrats must already CRS. Reproject beforehand needed.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/calculate_quadrat_environment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise mean environmental conditions per quadrat — calculate_quadrat_environment","text":"","code":"if (FALSE) { # \\dontrun{ env <- create_environmental_gradients(domain, resolution = 50, noise_level = 0.05) E <- calculate_quadrat_environment(env, quadrats, domain_crs = sf::st_crs(domain)) head(E) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rank_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank-Abundance Data — calculate_rank_abundance","title":"Rank-Abundance Data — calculate_rank_abundance","text":"Construct tidy table rank-abundance plotting combining observed species counts species_dist theoretical Fisher log-series abundances implied P.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rank_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank-Abundance Data — calculate_rank_abundance","text":"","code":"calculate_rank_abundance(species_dist, P)"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rank_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank-Abundance Data — calculate_rank_abundance","text":"species_dist sf point object character column species giving per-individual species identities. P named list returned load_config containing least fields used generate_fisher_log_series: N_SPECIES, N_INDIVIDUALS, DOMINANT_FRACTION, FISHER_ALPHA, FISHER_X.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rank_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank-Abundance Data — calculate_rank_abundance","text":"data frame columns: Rank Integer species rank (1 = abundant). Abundance Non-negative integer abundance. Source \"Observed\" \"Theoretical\".","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rank_abundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank-Abundance Data — calculate_rank_abundance","text":"Observed abundances computed base R table(), ranked descending order, annotated Source = \"Observed\". Theoretical abundances generated via generate_fisher_log_series using parameters P (e.g., N_SPECIES, N_INDIVIDUALS, FISHER_ALPHA, FISHER_X, DOMINANT_FRACTION) annotated Source = \"Theoretical\". two data frames row-bound.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rank_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank-Abundance Data — calculate_rank_abundance","text":"","code":"if (FALSE) { # \\dontrun{ ra <- calculate_rank_abundance(species_dist, P) head(ra) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rarefaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Rarefaction Curves Data — calculate_rarefaction","title":"Rarefaction Curves Data — calculate_rarefaction","text":"Generate per-site rarefaction curves (expected richness vs. sample size) using vegan::rarecurve.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rarefaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rarefaction Curves Data — calculate_rarefaction","text":"","code":"calculate_rarefaction(abund_matrix)"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rarefaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rarefaction Curves Data — calculate_rarefaction","text":"abund_matrix site x species abundance data frame first column site remaining columns species counts.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rarefaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rarefaction Curves Data — calculate_rarefaction","text":"data frame columns: SiteID Factor identifying site (abund_matrix$site). SampleSize Number individuals subsampled. RarefiedRichness Expected species richness sample size.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rarefaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rarefaction Curves Data — calculate_rarefaction","text":"result returned long (tidy) format one row per site x sample size point. SampleSize values come Subsample attribute provided vegan::rarecurve.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/calculate_rarefaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rarefaction Curves Data — calculate_rarefaction","text":"","code":"if (FALSE) { # \\dontrun{ rr <- calculate_rarefaction(abund_matrix) head(rr) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_species_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Species-Area (Accumulation) Data — calculate_species_area","title":"Species-Area (Accumulation) Data — calculate_species_area","text":"Compute species accumulation curve (SAR) using vegan::specaccum(method = \"random\").","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_species_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species-Area (Accumulation) Data — calculate_species_area","text":"","code":"calculate_species_area(abund_matrix)"},{"path":"https://ajsmit.github.io/spesim/reference/calculate_species_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species-Area (Accumulation) Data — calculate_species_area","text":"abund_matrix site x species abundance data frame first column site remaining columns species abundances.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_species_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Species-Area (Accumulation) Data — calculate_species_area","text":"data frame columns: Sites Number sites sampled. Richness Mean cumulative species richness. SD Standard deviation across permutations.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/calculate_species_area.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Species-Area (Accumulation) Data — calculate_species_area","text":"Uses 100 random permutations default estimate mean richness standard deviation function number sites.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/calculate_species_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species-Area (Accumulation) Data — calculate_species_area","text":"","code":"if (FALSE) { # \\dontrun{ sar <- calculate_species_area(abund_matrix) head(sar) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/create_abundance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a site-by-species abundance matrix from point–polygon overlaps — create_abundance_matrix","title":"Build a site-by-species abundance matrix from point–polygon overlaps — create_abundance_matrix","text":"Aggregates simulated individuals (species_dist, POINTS) sampling units (quadrats, POLYGONS) returns wide site × species table (one row per quadrat; one column per species). Counts computed via spatial intersection; species absent quadrat filled zeros.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_abundance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a site-by-species abundance matrix from point–polygon overlaps — create_abundance_matrix","text":"","code":"create_abundance_matrix(species_dist, quadrats, all_species_names)"},{"path":"https://ajsmit.github.io/spesim/reference/create_abundance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a site-by-species abundance matrix from point–polygon overlaps — create_abundance_matrix","text":"species_dist sf POINT layer individuals contains character (factor) column named species. Geometry must CRS quadrats. quadrats sf POLYGON (MULTIPOLYGON) layer sampling units contains integer (character) column named quadrat_id identifying site. Geometry must CRS species_dist. all_species_names Character vector giving complete set species include columns (e.g., LETTERS[1:S]). species present intersections still created columns zero-filled.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_abundance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a site-by-species abundance matrix from point–polygon overlaps — create_abundance_matrix","text":"base data.frame one row per quadrat columns: site Copy quadrat_id. <species> Non‑negative integer counts species all_species_names.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_abundance_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a site-by-species abundance matrix from point–polygon overlaps — create_abundance_matrix","text":"function uses st_intersection() associate individual quadrat polygon contains , tallies counts (quadrat_id, species) pivots wide format. points fall quadrat, result data frame one row per quadrat zeros species columns. Missing species columns (relative all_species_names) added zero-filled ensure consistent schema.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_abundance_matrix.html","id":"crs","dir":"Reference","previous_headings":"","what":"CRS","title":"Build a site-by-species abundance matrix from point–polygon overlaps — create_abundance_matrix","text":"Inputs must share coordinate reference system. differ, reproject beforehand (e.g., species_dist <- sf::st_transform(species_dist, sf::st_crs(quadrats))).","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/create_abundance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a site-by-species abundance matrix from point–polygon overlaps — create_abundance_matrix","text":"","code":"if (FALSE) { # \\dontrun{ spp <- simulate_points() # must contain geometry + 'species' quads <- make_quadrats() # must contain geometry + 'quadrat_id' A <- create_abundance_matrix(spp, quads, all_species_names = LETTERS[1:10]) head(A) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/create_environmental_gradients.html","id":null,"dir":"Reference","previous_headings":"","what":"Create synthetic environmental gradients over a spatial domain — create_environmental_gradients","title":"Create synthetic environmental gradients over a spatial domain — create_environmental_gradients","text":"Generates three continuous, spatially autocorrelated environmental gradients — temperature, elevation, rainfall — regular grid covering specified polygonal study area. gradients expressed normalised \\([0, 1]\\) form scaled physical units.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_environmental_gradients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create synthetic environmental gradients over a spatial domain — create_environmental_gradients","text":"","code":"create_environmental_gradients(domain, resolution, noise_level)"},{"path":"https://ajsmit.github.io/spesim/reference/create_environmental_gradients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create synthetic environmental gradients over a spatial domain — create_environmental_gradients","text":"domain sf polygon object defining extent gradients computed. bounding box used step. resolution Integer ≥ 2; number grid steps per axis. output contain resolution^2 rows. noise_level Non-negative numeric; standard deviation Gaussian noise added independently gradient clipping.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_environmental_gradients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create synthetic environmental gradients over a spatial domain — create_environmental_gradients","text":"data.frame columns: x, y Grid point coordinates (CRS domain). temperature, elevation, rainfall Normalised gradients \\([0, 1]\\). temperature_C Temperature degrees Celsius (approx. range: -2 28). elevation_m Elevation metres (0–2000). rainfall_mm Annual rainfall millimetres (200–900).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_environmental_gradients.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create synthetic environmental gradients over a spatial domain — create_environmental_gradients","text":"function: Derives bounding box domain constructs regular resolution × resolution grid points. Normalises \\(x\\) \\(y\\) coordinates \\([0, 1]\\). Computes: Temperature: weighted linear combination normalised \\(x\\) (0.7) \\(y\\) (0.3) coordinates. Elevation: decreases radially domain centre. Rainfall: weighted difference \\(x\\) \\(y\\) components, rescaled \\([0, 1]\\). Adds Gaussian noise standard deviation noise_level raw gradient clipping \\([0, 1]\\). Produces scaled versions common physical units: temperature_C (°C), elevation_m (metres), rainfall_mm (millimetres/year). Note gradients computed grid points within bounding box domain; masking polygon interior applied . Masking can done later st_intersects similar.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/create_environmental_gradients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create synthetic environmental gradients over a spatial domain — create_environmental_gradients","text":"","code":"if (FALSE) { # \\dontrun{ domain <- create_sampling_domain() env <- create_environmental_gradients(domain, resolution = 50, noise_level = 0.05) head(env) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/create_quadrat_from_center.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Axis‑Aligned Quadrat Polygon from a Center — create_quadrat_from_center","title":"Create an Axis‑Aligned Quadrat Polygon from a Center — create_quadrat_from_center","text":"Internal helper builds axis‑aligned rectangular polygon centered center_point dimensions size = c(width, height).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_quadrat_from_center.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Axis‑Aligned Quadrat Polygon from a Center — create_quadrat_from_center","text":"","code":"create_quadrat_from_center(center_point, size)"},{"path":"https://ajsmit.github.io/spesim/reference/create_quadrat_from_center.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Axis‑Aligned Quadrat Polygon from a Center — create_quadrat_from_center","text":"center_point sf POINT (sfg sfc length 1). size numeric length-2, c(width, height).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_quadrat_from_center.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Axis‑Aligned Quadrat Polygon from a Center — create_quadrat_from_center","text":"sf polygon geometry (sfg) representing rectangle. sfg POLYGON (single rectangle).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_sampling_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an irregular sampling domain polygon — create_sampling_domain","title":"Create an irregular sampling domain polygon — create_sampling_domain","text":"Generates single, closed, irregular polygon intended represent realistic, non-rectangular study area spatial simulation. polygon outline derived parameterized radius-angle curve added sinusoidal perturbations random noise produce \"organic\" shape. output returned sf object containing one polygon geometry column. can used directly plotting spatial domain within individuals, quadrats, transects placed.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_sampling_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an irregular sampling domain polygon — create_sampling_domain","text":"","code":"create_sampling_domain()"},{"path":"https://ajsmit.github.io/spesim/reference/create_sampling_domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an irregular sampling domain polygon — create_sampling_domain","text":"sf object one row POLYGON geometry.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/create_sampling_domain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an irregular sampling domain polygon — create_sampling_domain","text":"shape generated polar coordinates \\((r, \\theta)\\) using: base radius 10 units, sinusoidal radial modulations periods 3 5 cycles per revolution, independent uniform noise radius Cartesian coordinates break symmetry, vertical compression factor 0.8 induce aspect variation. 20 vertices connected sequence closed repeating first point. result wrapped sf::st_polygon() returned single-row sf object.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/create_sampling_domain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an irregular sampling domain polygon — create_sampling_domain","text":"","code":"if (FALSE) { # \\dontrun{ domain <- create_sampling_domain() plot(domain$geometry) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/dot-as_points_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Build an sf POINT layer from a numeric matrix of XY — .as_points_sf","title":"Build an sf POINT layer from a numeric matrix of XY — .as_points_sf","text":"Build sf POINT layer numeric matrix XY","code":""},{"path":"https://ajsmit.github.io/spesim/reference/dot-as_points_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build an sf POINT layer from a numeric matrix of XY — .as_points_sf","text":"","code":".as_points_sf(xy, crs)"},{"path":"https://ajsmit.github.io/spesim/reference/dot-clip_to_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep only points that fall inside the domain polygon — .clip_to_domain","title":"Keep only points that fall inside the domain polygon — .clip_to_domain","text":"Keep points fall inside domain polygon","code":""},{"path":"https://ajsmit.github.io/spesim/reference/dot-clip_to_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep only points that fall inside the domain polygon — .clip_to_domain","text":"","code":".clip_to_domain(pts_sf, domain)"},{"path":"https://ajsmit.github.io/spesim/reference/dot-has_cpp_geyer.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect availability of the fast Geyer engine — .has_cpp_geyer","title":"Detect availability of the fast Geyer engine — .has_cpp_geyer","text":"Detect availability fast Geyer engine","code":""},{"path":"https://ajsmit.github.io/spesim/reference/dot-has_cpp_geyer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect availability of the fast Geyer engine — .has_cpp_geyer","text":"","code":".has_cpp_geyer()"},{"path":"https://ajsmit.github.io/spesim/reference/dot-has_cpp_strauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect availability of the fast Strauss engine — .has_cpp_strauss","title":"Detect availability of the fast Strauss engine — .has_cpp_strauss","text":"Detect availability fast Strauss engine","code":""},{"path":"https://ajsmit.github.io/spesim/reference/dot-has_cpp_strauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect availability of the fast Strauss engine — .has_cpp_strauss","text":"","code":".has_cpp_strauss()"},{"path":"https://ajsmit.github.io/spesim/reference/dot-has_cpp_thomas.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect availability of the fast Thomas engine — .has_cpp_thomas","title":"Detect availability of the fast Thomas engine — .has_cpp_thomas","text":"Detect availability fast Thomas engine","code":""},{"path":"https://ajsmit.github.io/spesim/reference/dot-has_cpp_thomas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect availability of the fast Thomas engine — .has_cpp_thomas","text":"","code":".has_cpp_thomas()"},{"path":"https://ajsmit.github.io/spesim/reference/dot-require_spatstat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for (optional) spatstat availability — .require_spatstat","title":"Check for (optional) spatstat availability — .require_spatstat","text":"simulations longer require spatstat. helper remains -op stub avoid breaking internal calls previously relied . later re-enable spatstat-powered diagnostics, can repurpose function warn fail accordingly.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/dot-require_spatstat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for (optional) spatstat availability — .require_spatstat","text":"","code":".require_spatstat()"},{"path":"https://ajsmit.github.io/spesim/reference/generate_advanced_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Advanced Analysis Panel (rank/occupancy/SAR/decay/rarefaction + optional PPC) — generate_advanced_panel","title":"Advanced Analysis Panel (rank/occupancy/SAR/decay/rarefaction + optional PPC) — generate_advanced_panel","text":"Build multi‑panel summary key ecological diagnostics simulation run: rank–abundance (SAD), occupancy–abundance, species–area (accumulation), distance–decay, per‑quadrat rarefaction curves. point‑process packages spatstat.geom spatstat.explore available, additional row point–process diagnostics appended, showing Ripley’s K (border correction), \\(L(r)-r\\), pair‑correlation function \\(g(r)\\).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_advanced_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advanced Analysis Panel (rank/occupancy/SAR/decay/rarefaction + optional PPC) — generate_advanced_panel","text":"","code":"generate_advanced_panel(res)"},{"path":"https://ajsmit.github.io/spesim/reference/generate_advanced_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Advanced Analysis Panel (rank/occupancy/SAR/decay/rarefaction + optional PPC) — generate_advanced_panel","text":"res list produced main simulator containing least: P Parameter list (used labels/themes needed). species_dist sf POINT layer individuals species column. abund_matrix Site \\(\\times\\) species abundance data frame (first column site). site_coords Data frame site, x, y quadrat centroids. domain sf polygon/multipolygon study area (used PPC window).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_advanced_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Advanced Analysis Panel (rank/occupancy/SAR/decay/rarefaction + optional PPC) — generate_advanced_panel","text":"patchwork object (ggplot layout). can print save ggplot2::ggsave().","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_advanced_panel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Advanced Analysis Panel (rank/occupancy/SAR/decay/rarefaction + optional PPC) — generate_advanced_panel","text":"optional point–process diagnostics computed spatstat.geom (spatial windows point patterns) spatstat.explore (summary functions Kest pcf) installed. domain converted window (owin) using spatstat.geom::.owin() sf polygon; individuals converted ppp window. compute: Kest(ppp, correction = \"border\") plot border‑corrected K. \\(L(r) = \\sqrt{K(r)/\\pi}\\) \\(L(r)-r\\) (\\(>0\\) suggests clustering). pcf(ppp) estimate pair‑correlation \\(g(r)\\) (\\(>1\\) suggests clustering; \\(<1\\) inhibition). conversion owin/ppp fails, PPC row omitted gracefully.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/generate_advanced_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Advanced Analysis Panel (rank/occupancy/SAR/decay/rarefaction + optional PPC) — generate_advanced_panel","text":"","code":"if (FALSE) { # \\dontrun{ panel <- generate_advanced_panel(results_list) ggplot2::ggsave(\"advanced_panel.png\", panel, width = 12, height = 14, dpi = 300) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/generate_fisher_log_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Fisher's log-series abundances with a dominant species — generate_fisher_log_series","title":"Generate Fisher's log-series abundances with a dominant species — generate_fisher_log_series","text":"Creates rank-abundance vector S species following Fisher's log-series, allocating fixed fraction individuals single dominant species (\"\"). remaining individuals distributed across species B... decreasing expectation \\(\\propto \\alpha x^{r} / r\\), \\(r = 2, \\ldots, S\\).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_fisher_log_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Fisher's log-series abundances with a dominant species — generate_fisher_log_series","text":"","code":"generate_fisher_log_series(   n_species,   n_individuals,   dominant_fraction,   alpha,   x )"},{"path":"https://ajsmit.github.io/spesim/reference/generate_fisher_log_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Fisher's log-series abundances with a dominant species — generate_fisher_log_series","text":"n_species Integer (>= 1). Total number species. n_individuals Integer (>= 1). Total number individuals allocate. dominant_fraction Numeric \\([0,1]\\). Fraction individuals assigned species \"\"; remainder split among species \"B\" ... according log-series. alpha Numeric (> 0). Fisher's \\(\\alpha\\) parameter controlling tail weight. x Numeric, typically close 1. log-series scaling parameter.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_fisher_log_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Fisher's log-series abundances with a dominant species — generate_fisher_log_series","text":"named numeric vector integer abundances whose names \"\", \"B\", \"C\", ... n_species. vector sums n_individuals.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_fisher_log_series.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Fisher's log-series abundances with a dominant species — generate_fisher_log_series","text":"algorithm: Reserves round(n_individuals * dominant_fraction) individuals species \"\". Computes relative expectations ranks 2:n_species using \\(\\alpha x^{r} / r\\) scales remaining individuals. Rounds integers adjusts second species (present) final sum equals n_individuals. Names vector LETTERS[1:n_species] drops species whose rounded abundance 0.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_fisher_log_series.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate Fisher's log-series abundances with a dominant species — generate_fisher_log_series","text":"Rounding may produce zeros tail species; omitted return value. need fixed-length vector including zeros, reindex LETTERS[1:n_species] call.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/generate_fisher_log_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Fisher's log-series abundances with a dominant species — generate_fisher_log_series","text":"","code":"abund <- generate_fisher_log_series(   n_species = 10, n_individuals = 1000,   dominant_fraction = 0.3, alpha = 3, x = 0.95 ) sum(abund) # 1000 #> [1] 1000"},{"path":"https://ajsmit.github.io/spesim/reference/generate_full_report.html","id":null,"dir":"Reference","previous_headings":"","what":"(Advanced) Build a human-readable multi-section report — generate_full_report","title":"(Advanced) Build a human-readable multi-section report — generate_full_report","text":"users need call directly. run run_spatial_simulation(write_outputs = TRUE), report written disk automatically timestamped OUTPUT_PREFIX. function returns report single character string advanced workflows (e.g., embedding text another system, tests, custom pipelines). report summarises environmental ranges, gradient correlations, species abundance distribution, per-quadrat alpha diversity, diversity partitioning, simple spatial autocorrelation, Fisher log-series validation, computation notes (e.g., whether fast Rcpp engines used point processes).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_full_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Advanced) Build a human-readable multi-section report — generate_full_report","text":"","code":"generate_full_report(res)"},{"path":"https://ajsmit.github.io/spesim/reference/generate_full_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Advanced) Build a human-readable multi-section report — generate_full_report","text":"res named list produced simulator least elements: P Parameter list returned load_config(). Must include keys N_INDIVIDUALS, N_SPECIES, DOMINANT_FRACTION, FISHER_ALPHA, FISHER_X, , used, tibble GRADIENT columns species, gradient (one \"temperature\",\"elevation\",\"rainfall\"), optimum, tol. env_gradients data frame columns temperature_C, elevation_m, rainfall_mm containing gridded environmental fields used context. species_dist sf POINT layer individuals species column. Used tallies alpha snapshots. quadrats sf POLYGON layer quadrat_id; used compute per-site alpha summaries. abund_matrix site \\(\\times\\) species abundance table (first column site; remaining columns species counts), typically returned create_abundance_matrix(). site_coords data frame columns site, x, y giving quadrat centroids CRS used analysis.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_full_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Advanced) Build a human-readable multi-section report — generate_full_report","text":"single character scalar containing full report text. files written function; callers typically append string log include simulation report sink.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_full_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(Advanced) Build a human-readable multi-section report — generate_full_report","text":"Sections produced: Environmental Gradients: min/max/range temperature (deg C), elevation (m), rainfall (mm), short pattern note list gradient-responsive species including optima/tolerances rendered natural units. Gradient Correlations: pairwise Pearson correlations among three gradients brief interpretation (orthogonal vs. correlated). Species Abundance Distribution: ranked counts percentage labels dominant gradient-responsive species. Spatial Alpha Diversity: per-quadrat species richness compact species list (counts) quadrat. Diversity Partitioning: mean alpha richness (+/-SE), Shannon's H', Simpson's 1-D, gamma richness, Whittaker additive beta, mean pairwise Sorensen dissimilarity (computed binary Bray-Curtis presence-absence), simple abundance dispersion metrics. Spatial Autocorrelation: Pearson correlation inter-quadrat distances differences richness (Mantel-style proxy) p-value interpretation. Fisher Log-series Validation: RMSE, R^2, max residual observed ranks theoretical log-series abundances; compares configured FISHER_ALPHA fisher.alpha estimated data. Computation Notes: baseline point-process models requested dominant species (SPATIAL_PROCESS_A, SPATIAL_PROCESS_OTHERS), whether fast Rcpp engines used applicable: Thomas: rthomas_bbox_cpp (fast) spatstat-based fallback Strauss: rstrauss_bbox_cpp (fast) spatstat-based fallback Internally, routine relies base summaries, sf spatial intersections, vegan diversity indices. avoids tidy-evaluation favor explicit column access keep dependencies minimal within non-interactive reporting context.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_full_report.html","id":"typical-usage","dir":"Reference","previous_headings":"","what":"Typical usage","title":"(Advanced) Build a human-readable multi-section report — generate_full_report","text":"users read saved report disk rather call function. See read_latest_report() convenient helper.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_full_report.html","id":"requirements","dir":"Reference","previous_headings":"","what":"Requirements","title":"(Advanced) Build a human-readable multi-section report — generate_full_report","text":"res object must consistent (components correspond simulation coordinate reference system). Missing empty inputs lead sections populated NA summaries informative defaults possible; irrecoverable inconsistencies raise errors.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/generate_heterogeneous_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a heterogeneous community (point process + environment + interactions) — generate_heterogeneous_distribution","title":"Generate a heterogeneous community (point process + environment + interactions) — generate_heterogeneous_distribution","text":"Generates individual locations species identities arbitrary polygon domain combining: spatial point process baseline locations (clustered, inhibited, Poisson), environmental filtering gradient-responsive species, local interspecific interactions within neighbourhood radius. dominant species \"\" pool non-dominant species can use different point-process models. Environmental suitability applied Gaussian preference around per-species optimum, local interactions incorporated multiplicative modifier computed nearby already-assigned individuals.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_heterogeneous_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a heterogeneous community (point process + environment + interactions) — generate_heterogeneous_distribution","text":"","code":"generate_heterogeneous_distribution(domain, P)"},{"path":"https://ajsmit.github.io/spesim/reference/generate_heterogeneous_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a heterogeneous community (point process + environment + interactions) — generate_heterogeneous_distribution","text":"domain sf polygon (multipolygon) defining sampling domain; must valid CRS (projected coordinates recommended). P fully materialized parameter list, typically load_config(), containing least: Community size: N_SPECIES, N_INDIVIDUALS, DOMINANT_FRACTION, FISHER_ALPHA, FISHER_X. Environment: SAMPLING_RESOLUTION, ENVIRONMENTAL_NOISE, GRADIENT (tibble species, gradient {temperature, elevation, rainfall}, optimum \\([0,1]\\), tol > 0). absent, species treated neutral. Point-process selection (strings): SPATIAL_PROCESS_A SPATIAL_PROCESS_OTHERS \"poisson\", \"thomas\", \"strauss\", \"geyer\". Thomas () params (used): A_PARENT_INTENSITY (parents per area; optional), A_MEAN_OFFSPRING (mean children per parent), A_CLUSTER_SCALE (Gaussian sd offspring displacement; map units). Strauss/Geyer (others) params (used): OTHERS_R (interaction radius), OTHERS_GAMMA (interaction parameter; < 1 inhibition, > 1 attraction), OTHERS_S (Geyer saturation count; ignored Strauss), OTHERS_BETA (baseline intensity/multiplier; optional). Local interactions: INTERACTION_RADIUS (map units) INTERACTION_MATRIX (S x S numeric, dimnames = species letters).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_heterogeneous_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a heterogeneous community (point process + environment + interactions) — generate_heterogeneous_distribution","text":"sf POINT layer character column species appended environmental columns (e.g. temperature_C, elevation_m, rainfall_mm). Rows correspond simulated individuals retained assignment.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_heterogeneous_distribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a heterogeneous community (point process + environment + interactions) — generate_heterogeneous_distribution","text":"Abundances. Total individuals per species drawn generate_fisher_log_series(), allocating fixed fraction species \"\" distributing remainder log-series across B, C, .... Baseline locations (point processes). Locations simulated using process names P. Supported values (case-insensitive): \"poisson\" Homogeneous Poisson inside domain. \"thomas\" Thomas (Neyman-Scott) cluster process; uses parent intensity (derived missing), mean offspring, Gaussian cluster scale. Implemented internally. \"strauss\" Inhibition via sequential-inhibition surrogate using interaction radius OTHERS_R inhibition strength OTHERS_S \\((0,1]\\). Lower OTHERS_S increases inhibition. \"geyer\" Geyer saturation surrogate: acceptance probability proportional \\(\\gamma^{\\min(m, s)}\\) \\(m\\) neighbours fall within OTHERS_R saturation count OTHERS_S. Implemented internally. Environmental filtering. species listed P$GRADIENT, assignment probability species proportional \\(\\exp\\{-(x - \\mu)^2 / (2 \\sigma^2)\\}\\), \\(x\\) normalized environmental value point, \\(\\mu\\) species optimum, \\(\\sigma\\) tolerance. Environmental values attached nearest neighbour join grid returned create_environmental_gradients(). Local interactions. candidate point focal species, abundance-independent interaction modifier geometric mean corresponding coefficients P$INTERACTION_MATRIX neighbours found within P$INTERACTION_RADIUS (using 5 nearest already-assigned individuals). Coefficients > 1 favour co-occurrence; < 1 penalize . Tie-breaking robustness. weights step non-finite non-positive, uniform assignment used step avoid dead ends. points non-empty species returned.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/generate_heterogeneous_distribution.html","id":"notes","dir":"Reference","previous_headings":"","what":"Notes","title":"Generate a heterogeneous community (point process + environment + interactions) — generate_heterogeneous_distribution","text":"Use projected CRS (e.g. metres) process radii cluster scales meaningful linear units. SPATIAL_PROCESS_OTHERS inhibitory n large relative OTHERS_R domain area, may hit feasibility limits; adjust n, r, choose different process. Setting INTERACTION_RADIUS = 0 -ones matrix disables local interaction effects.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/generate_heterogeneous_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a heterogeneous community (point process + environment + interactions) — generate_heterogeneous_distribution","text":"","code":"if (FALSE) { # \\dontrun{ P <- load_config(\"simul_init.txt\") domain <- create_sampling_domain()  # Example: A clustered (Thomas), others mildly inhibited (Strauss) P$SPATIAL_PROCESS_A <- \"thomas\" P$A_PARENT_INTENSITY <- NA P$A_MEAN_OFFSPRING <- 10 P$A_CLUSTER_SCALE <- 0.8  P$SPATIAL_PROCESS_OTHERS <- \"strauss\" P$OTHERS_R <- 0.6 P$OTHERS_S <- 0.5  pts <- generate_heterogeneous_distribution(domain, P) plot(sf::st_geometry(pts), pch = 16, cex = 0.4) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/load_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Simulation Configuration (with defaults & validation) — load_config","title":"Load Simulation Configuration (with defaults & validation) — load_config","text":"Reads text configuration file (KEY = value), merges values package defaults, validates options, resolves gradient specifications tidy table, materialises quadrat sizes, sets random seed. supported public entry point reading configs; low-level parsing handled internally.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Simulation Configuration (with defaults & validation) — load_config","text":"","code":"load_config(init_file)"},{"path":"https://ajsmit.github.io/spesim/reference/load_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Simulation Configuration (with defaults & validation) — load_config","text":"init_file Character scalar; path configuration file.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Simulation Configuration (with defaults & validation) — load_config","text":"named list P fully-resolved parameters used simulator (including tidy P$GRADIENT tibble P$QUADRAT_SIZE).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Simulation Configuration (with defaults & validation) — load_config","text":"Supported value forms: Scalars: 300, TRUE, 0.15, \"#22223b\". Comma vectors: ,B,C 0.1, 0.2, 0.3. R-style character vectors inline edgelists: e.g. INTERACTIONS_EDGELIST = c(\",B-D,0.8\", \"C,,1.2\", \"E,*,0.95\"). Named entries: :0.55, temperature:0.12. may specify INTERACTIONS_FILE = \"path//interactions.txt\" point separate interactions config, embed rules directly INTERACTIONS_EDGELIST = c(\",B-D,0.8\", \"C,,1.2\"). neither provided, interactions default neutral (1.0) INTERACTION_RADIUS = 0. Gradient keys supported: temperature, elevation, rainfall. Use GRADIENT_SPECIES, GRADIENT_ASSIGNMENTS, plus either GRADIENT_OPTIMA GRADIENT_TOLERANCE scalar, per-species named, per-gradient named values.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/load_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load Simulation Configuration (with defaults & validation) — load_config","text":"","code":"if (FALSE) { # \\dontrun{ P <- load_config(\"inst/examples/spesim_init_complete.txt\") } # }"},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Load interspecific interaction settings (radius + matrix) — load_interactions","title":"Load interspecific interaction settings (radius + matrix) — load_interactions","text":"Reads separate interactions config file returns local-interaction radius along \\(S \\times S\\) interaction matrix \\(S\\) species (rows = focal, columns = neighbour). file missing incomplete, neutral matrix ones radius 0 returned.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load interspecific interaction settings (radius + matrix) — load_interactions","text":"","code":"load_interactions(interactions_file, n_species)"},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load interspecific interaction settings (radius + matrix) — load_interactions","text":"interactions_file Character scalar NULL. Path interactions configuration file. NULL found, returned radius 0 coefficients 1. n_species Integer. Number species; defines size returned matrix expected label set LETTERS[1:n_species].","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load interspecific interaction settings (radius + matrix) — load_interactions","text":"list components: radius Numeric length-1; interaction radius (0 disables interactions). matrix Numeric matrix size \\(S \\times S\\) dimnames LETTERS[1:S]. Non-finite values rejected.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load interspecific interaction settings (radius + matrix) — load_interactions","text":"interactions file parsed simple KEY = value pairs. following keys recognized: INTERACTION_RADIUS: non-negative numeric; distance threshold within neighbours influence assignment probabilities. MATRIX_CSV: path CSV containing (sub)matrix row names column names corresponding species labels (e.g. ..Z). missing rows/columns filled 1. EDGELIST_CSV: path CSV columns focal, neighbor, value; entries inserted appropriate cells full matrix. AUTO: optional flag (TRUE/FALSE) enabling simple built-example structure CSV provided. MATRIX_CSV EDGELIST_CSV supplied, MATRIX_CSV takes precedence.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load interspecific interaction settings (radius + matrix) — load_interactions","text":"","code":"if (FALSE) { # \\dontrun{ I <- load_interactions(\"config/interactions.txt\", n_species = 10) I$radius I$matrix[1:3, 1:3] } # }"},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions_inline.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse inline interaction rules from the init file — load_interactions_inline","title":"Parse inline interaction rules from the init file — load_interactions_inline","text":"Converts INTERACTIONS_EDGELIST (CSV-like string; optional INTERACTION_RADIUS) resolved interaction list (radius, matrix).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions_inline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse inline interaction rules from the init file — load_interactions_inline","text":"","code":"load_interactions_inline(rules, n_species, radius = 0)"},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions_inline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse inline interaction rules from the init file — load_interactions_inline","text":"rules Character scalar character vector CSV-like lines columns focal,neighbour,value optional wildcard/range syntax (see vignette). n_species Integer S; used define full SxS matrix. radius Optional numeric radius override; NULL, defaults 0.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions_inline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse inline interaction rules from the init file — load_interactions_inline","text":"list radius (numeric) matrix (SxS numeric dimnames).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/load_interactions_inline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse inline interaction rules from the init file — load_interactions_inline","text":"","code":"if (FALSE) { # \\dontrun{ load_interactions_inline(   rules = c(\"A,B-D,0.8\", \"C,A,1.2\", \"E,*,0.95\"),   radius = 2, n_species = 10 ) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Non‑Overlapping Quadrat Placement — place_quadrats","title":"Random Non‑Overlapping Quadrat Placement — place_quadrats","text":"Places axis‑aligned rectangular quadrats random locations inside domain, rejecting candidates either () fully contained (ii) overlap previously accepted quadrat. simple rejection‑sampling loop used finite attempt budget.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Non‑Overlapping Quadrat Placement — place_quadrats","text":"","code":"place_quadrats(domain, n_quadrats, quadrat_size)"},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Non‑Overlapping Quadrat Placement — place_quadrats","text":"domain sf polygon/multipolygon defining sampling region. Must carry valid projected CRS suitable linear units. n_quadrats Integer (≥1). Target number non‑overlapping quadrats place. quadrat_size Numeric vector length 2, c(width, height), giving quadrat dimensions units domain CRS. values must positive finite.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Non‑Overlapping Quadrat Placement — place_quadrats","text":"sf object (polygons) : quadrat_id Sequential integer identifier placed quadrat. geometry Axis‑aligned rectangular polygon quadrat. valid placement possible, returns empty sf CRS emits warning.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random Non‑Overlapping Quadrat Placement — place_quadrats","text":"candidate center drawn uniformly domain’s bounding box, shrunk full rectangle size quadrat_size = c(width, height) fits inside. resulting polygon accepted entirely within domain non‑overlapping accepted quadrats. loop stops n_quadrats placed n_quadrats * 100 attempts (warning issued target met). CRS: Use projected CRS (e.g., meters). quadrat_size interpreted CRS linear units. Reproducibility: Set seed (e.g., set.seed(...)) calling obtain repeatable placements.","code":""},{"path":[]},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_systematic.html","id":null,"dir":"Reference","previous_headings":"","what":"Systematic Grid Quadrat Placement — place_quadrats_systematic","title":"Systematic Grid Quadrat Placement — place_quadrats_systematic","text":"Places axis‑aligned rectangular quadrats centers regular grid spanning domain’s bounding box, retains quadrats whose full geometry lies inside domain polygon. grid density chosen approximate n_quadrats total placements respecting domain’s aspect ratio (cells roughly square map space matching requested count).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_systematic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Systematic Grid Quadrat Placement — place_quadrats_systematic","text":"","code":"place_quadrats_systematic(domain, n_quadrats, quadrat_size)"},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_systematic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Systematic Grid Quadrat Placement — place_quadrats_systematic","text":"domain sf polygon/multipolygon representing sampling region. Must carry valid projected CRS suitable linear measurements. n_quadrats Integer (≥1). Approximate number quadrats place. actual number returned count grid‑centered quadrats fully fit inside domain. quadrat_size Numeric vector length 2, c(width, height), giving quadrat dimensions linear units domain (e.g., meters). values must positive finite.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_systematic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Systematic Grid Quadrat Placement — place_quadrats_systematic","text":"sf object (polygons) : quadrat_id Sequential integer identifier placed quadrat. geometry Axis‑aligned rectangular polygon quadrat.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_systematic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Systematic Grid Quadrat Placement — place_quadrats_systematic","text":"grid defined domain’s bounding box using nx × ny grid centers, nx ≈ sqrt(n_quadrats / aspect_ratio) ny ≈ aspect_ratio × nx, aspect_ratio = height / width bounding box. produces roughly nx * ny ≈ n_quadrats centers. grid center, axis‑aligned rectangle size quadrat_size = c(width, height) created. Quadrats kept fully within domain (using sf::st_within()). domain irregular narrow, number retained quadrats can less n_quadrats. function returns valid quadrats emits warning none fit. domain use projected (planar) CRS distances sizes linear units (e.g., meters). using lon/lat, reproject first (e.g., UTM).","code":""},{"path":[]},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_tiled.html","id":null,"dir":"Reference","previous_headings":"","what":"Tiled (Systematic Cell) Quadrat Placement — place_quadrats_tiled","title":"Tiled (Systematic Cell) Quadrat Placement — place_quadrats_tiled","text":"Places non-overlapping rectangular quadrats using regular grid tiles extent input domain. Candidate cells generated sf::st_make_grid() using requested quadrat width height. Cells fall entirely inside domain (via sf::st_within(..., sparse = FALSE)) kept valid locations, n_quadrats sampled random (set seed reproducibility). candidates come grid, selected quadrats never overlap.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_tiled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tiled (Systematic Cell) Quadrat Placement — place_quadrats_tiled","text":"","code":"place_quadrats_tiled(domain, n_quadrats, quadrat_size)"},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_tiled.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tiled (Systematic Cell) Quadrat Placement — place_quadrats_tiled","text":"domain sf polygon multipolygon object defining sampling region. Must valid CRS suitable linear measurements (projected, geographic). n_quadrats Integer (≥1). target number quadrats place. fewer valid grid cells exist inside domain, function place maximum possible adjust value downward warning. quadrat_size Numeric vector length 2, c(width, height), giving quadrat dimensions units domain (e.g., meters). values must positive finite.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_tiled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tiled (Systematic Cell) Quadrat Placement — place_quadrats_tiled","text":"sf object (polygons) two columns: quadrat_id Sequential integer identifier placed quadrats. geometry Polygon geometry quadrat.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_tiled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tiled (Systematic Cell) Quadrat Placement — place_quadrats_tiled","text":"function assumes planar (projected) CRS distances areas linear units; domain longitude/latitude, reproject first (e.g., UTM). quadrat_size passed sf::st_make_grid(cellsize = ...), two numbers interpreted width height domain’s units. fewer n_quadrats valid cells fit entirely inside domain, function places many possible emits warning. Returned quadrats labeled sequentially order sampled (quadrat_id = 1, 2, …, n_quadrats).","code":""},{"path":[]},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_transect.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel‑Transect Quadrat Placement — place_quadrats_transect","title":"Parallel‑Transect Quadrat Placement — place_quadrats_transect","text":"Places axis‑aligned rectangular quadrats evenly spaced positions along set parallel transect lines crossing domain specified compass angle. function first shrinks domain half quadrat diagonal form safe sampling area, ensuring every returned quadrat lies fully inside original domain.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_transect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel‑Transect Quadrat Placement — place_quadrats_transect","text":"","code":"place_quadrats_transect(   domain,   n_transects,   n_quadrats_per_transect,   quadrat_size,   angle )"},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_transect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel‑Transect Quadrat Placement — place_quadrats_transect","text":"domain sf polygon/multipolygon defining sampling region. Must carry valid projected CRS suitable linear units (e.g., meters). n_transects Integer (≥1). Number parallel transect lines generate. n_quadrats_per_transect Integer (≥1). Number quadrats place along transect clipping safe area. quadrat_size Numeric vector length 2, c(width, height), giving quadrat dimensions units domain CRS. values must positive finite. angle Numeric. Compass bearing degrees transect orientation (0 = North/, 90 = East/right). Values outside [0, 360) allowed interpreted modulo 360.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_transect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel‑Transect Quadrat Placement — place_quadrats_transect","text":"sf object (polygons) : quadrat_id Sequential integer identifier placed quadrat. geometry Axis‑aligned rectangular polygon quadrat.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_transect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel‑Transect Quadrat Placement — place_quadrats_transect","text":"transect orientation given angle compass degrees (0 = North, 90 = East, 180 = South, 270 = West). n_transects parallel lines positioned across domain’s extent, line cropped safe area. Along retained segment, n_quadrats_per_transect centers placed linear interpolation segment start end (single quadrat uses midpoint). center generates axis‑aligned rectangular quadrat size quadrat_size = c(width, height) domain’s units. Use projected (planar) CRS domain (e.g., meters) distances sizes meaningful. domain small relative quadrat_size, safe area may empty quadrats returned.","code":""},{"path":[]},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_voronoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Voronoi‑based Quadrat Placement — place_quadrats_voronoi","title":"Voronoi‑based Quadrat Placement — place_quadrats_voronoi","text":"Places rectangular quadrats first generating dense set random seed points inside domain, computing Voronoi tessellation, identifying Voronoi cells whose largest inscribed circle big enough contain requested quadrat (diagonal). suitable cell, quadrat placed cell’s “pole inaccessibility” (center inscribed circle), tends yield well‑spaced sampling locations even irregular polygons.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_voronoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Voronoi‑based Quadrat Placement — place_quadrats_voronoi","text":"","code":"place_quadrats_voronoi(domain, n_quadrats, quadrat_size, voronoi_seed_factor)"},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_voronoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Voronoi‑based Quadrat Placement — place_quadrats_voronoi","text":"domain sf polygon/multipolygon defining sampling region. Must carry valid projected CRS suitable linear measurements. n_quadrats Integer (≥1). Target number quadrats place. actual number returned may smaller domain accommodate enough suitable Voronoi cells. quadrat_size Numeric vector length 2, c(width, height), giving quadrat dimensions linear units domain (e.g., meters). values must positive finite. voronoi_seed_factor Numeric (≥1 recommended). Multiplier controlling many random seeds used build Voronoi diagram: n_seeds = n_quadrats * voronoi_seed_factor. Use larger values (e.g., 8–20) irregular narrow domains improve coverage.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_voronoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Voronoi‑based Quadrat Placement — place_quadrats_voronoi","text":"sf object (polygons) : quadrat_id Sequential integer identifier placed quadrats. geometry Axis‑aligned rectangular polygon quadrat.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/place_quadrats_voronoi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Voronoi‑based Quadrat Placement — place_quadrats_voronoi","text":"function assumes projected (planar) CRS domain distances/areas linear units. data longitude/latitude, reproject (e.g., UTM) calling. number initial seeds n_quadrats * voronoi_seed_factor. Larger values explore domain densely typically find suitable cells, cost extra computation. Suitability decided comparing cell’s inscribed‑circle radius half requested quadrat diagonal: radius >= sqrt(width^2 + height^2) / 2. fewer n_quadrats suitable cells exist, suitable cells used warning issued. Quadrats axis‑aligned rectangles centered selected cell centers. cell centers can near , axis‑aligned rectangles may still overlap slightly tight spaces—even circles . strict non‑overlap required, post‑filtering recommended. Internally uses sf::st_voronoi() tessellation st_inscribed_circle() (provided lwgeom) compute maximal ‑circle centers/radii.","code":""},{"path":[]},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/plot_distance_decay.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Distance-Decay Relationship — plot_distance_decay","title":"Plot Distance-Decay Relationship — plot_distance_decay","text":"Displays community dissimilarity versus geographic distance smooth loess trend. y-axis constrained [0, 1] reflect range Sorensen (binary Bray-Curtis) dissimilarity.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_distance_decay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Distance-Decay Relationship — plot_distance_decay","text":"","code":"plot_distance_decay(decay_data)"},{"path":"https://ajsmit.github.io/spesim/reference/plot_distance_decay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Distance-Decay Relationship — plot_distance_decay","text":"decay_data data frame returned calculate_distance_decay columns Distance (pairwise Euclidean distances among quadrat centroids) Dissimilarity (pairwise Sorensen dissimilarities).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_distance_decay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Distance-Decay Relationship — plot_distance_decay","text":"ggplot object.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_distance_decay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Distance-Decay Relationship — plot_distance_decay","text":"Points show pairwise site comparisons; loess smoother summarizes overall distance-decay pattern. Input already exclude self-comparisons.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/plot_distance_decay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Distance-Decay Relationship — plot_distance_decay","text":"","code":"if (FALSE) { # \\dontrun{ dd <- calculate_distance_decay(abund_matrix, site_coords) plot_distance_decay(dd) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/plot_occupancy_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Occupancy-Abundance Relationship — plot_occupancy_abundance","title":"Plot Occupancy-Abundance Relationship — plot_occupancy_abundance","text":"Scatterplot total abundance (per species) versus site occupancy (number quadrats species occurs) axes log scale. Adds optional least-squares trend line visual guidance.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_occupancy_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Occupancy-Abundance Relationship — plot_occupancy_abundance","text":"","code":"plot_occupancy_abundance(oa_data)"},{"path":"https://ajsmit.github.io/spesim/reference/plot_occupancy_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Occupancy-Abundance Relationship — plot_occupancy_abundance","text":"oa_data data frame returned calculate_occupancy_abundance columns Species, TotalAbundance (non-negative numeric), Occupancy (non-negative integer).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_occupancy_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Occupancy-Abundance Relationship — plot_occupancy_abundance","text":"ggplot object.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_occupancy_abundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Occupancy-Abundance Relationship — plot_occupancy_abundance","text":"input contains observations (totals zero), minimal placeholder plot returned indicating nothing draw. Otherwise axes shown base-10 logarithmic scales.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/plot_occupancy_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Occupancy-Abundance Relationship — plot_occupancy_abundance","text":"","code":"if (FALSE) { # \\dontrun{ oa <- calculate_occupancy_abundance(abund_matrix) plot_occupancy_abundance(oa) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/plot_rank_abundance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Rank-Abundance Curve — plot_rank_abundance","title":"Plot Rank-Abundance Curve — plot_rank_abundance","text":"Draws observed theoretical rank-abundance (SAD) curves log-scaled abundance axis. input combined table returned calculate_rank_abundance(), contains one row per rank Source column distinguishing Observed vs Theoretical.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_rank_abundance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Rank-Abundance Curve — plot_rank_abundance","text":"","code":"plot_rank_abundance(rank_abundance_data)"},{"path":"https://ajsmit.github.io/spesim/reference/plot_rank_abundance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Rank-Abundance Curve — plot_rank_abundance","text":"rank_abundance_data data frame (minimum) columns Rank (integer rank starting 1), Abundance (non-negative numeric counts), Source (factor/character levels \"Observed\" \"Theoretical\").","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_rank_abundance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Rank-Abundance Curve — plot_rank_abundance","text":"ggplot object.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_rank_abundance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Rank-Abundance Curve — plot_rank_abundance","text":"y-axis displayed base-10 logarithmic scale. Lines points styled Source (solid vs dashed; different shapes colors).","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/plot_rank_abundance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Rank-Abundance Curve — plot_rank_abundance","text":"","code":"if (FALSE) { # \\dontrun{ ra <- calculate_rank_abundance(species_dist, P) plot_rank_abundance(ra) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/plot_rarefaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Rarefaction Curves — plot_rarefaction","title":"Plot Rarefaction Curves — plot_rarefaction","text":"Draws per-site rarefaction curves (expected richness function number individuals sampled) using long-format output calculate_rarefaction.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_rarefaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Rarefaction Curves — plot_rarefaction","text":"","code":"plot_rarefaction(rarefaction_data)"},{"path":"https://ajsmit.github.io/spesim/reference/plot_rarefaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Rarefaction Curves — plot_rarefaction","text":"rarefaction_data data frame columns SiteID (factor/character site label), SampleSize (non-negative integer), RarefiedRichness (expected species count).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_rarefaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Rarefaction Curves — plot_rarefaction","text":"ggplot object.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_rarefaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Rarefaction Curves — plot_rarefaction","text":"site/quadrat drawn separate line. Colors mapped SiteID using discrete viridis palette readability.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/plot_rarefaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Rarefaction Curves — plot_rarefaction","text":"","code":"if (FALSE) { # \\dontrun{ rr <- calculate_rarefaction(abund_matrix) plot_rarefaction(rr) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/plot_spatial_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the spatial sampling simulation (domain, individuals, quadrats, optional gradient) — plot_spatial_sampling","title":"Plot the spatial sampling simulation (domain, individuals, quadrats, optional gradient) — plot_spatial_sampling","text":"Creates publication‑quality map simulated landscape. domain outline drawn first; simulated individuals (POINT geometries) overlaid colored species; sampling quadrats (POLYGONs) drawn IDs. Optionally environmental raster/heat field shown underneath context.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_spatial_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the spatial sampling simulation (domain, individuals, quadrats, optional gradient) — plot_spatial_sampling","text":"","code":"plot_spatial_sampling(   domain,   species,   quadrats,   P,   show_gradient = FALSE,   env_gradients = NULL,   gradient_type = \"temperature_C\" )"},{"path":"https://ajsmit.github.io/spesim/reference/plot_spatial_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the spatial sampling simulation (domain, individuals, quadrats, optional gradient) — plot_spatial_sampling","text":"domain sf polygon multipolygon representing study area. Geometry valid CRS species quadrats. species sf POINT object individuals character/factor column named species. points must lie within domain correct visual interpretation (function clip). quadrats sf POLYGON/MULTIPOLYGON object numeric/integer column quadrat_id. Quadrats drawn outlines labeled centroids. P named list plotting/summary parameters. following fields read present (default missing): POINT_SIZE (numeric, default 0.2) — point size individuals, POINT_ALPHA (numeric \\((0,1)\\), default 1) — point transparency, QUADRAT_COLOUR (character, default “black”) — quadrat outline/label colour, BACKGROUND_COLOUR (character, default “white”) — plot background, FOREGROUND_COLOUR (character, default ”#22223b”) — domain outline/title colour, N_SPECIES (integer) — used size palette; inferred data absent, N_INDIVIDUALS (integer) — used subtitle count available. show_gradient Logical; TRUE, environmental surface drawn beneath geometries using geom_raster(). Default FALSE. env_gradients Required show_gradient = TRUE. data frame columns x, y (grid coordinates, CRS units domain) one numeric columns representing environmental variables (e.g., temperature_C, elevation_m, rainfall_mm). column named gradient_type must exist numeric. gradient_type Character scalar naming column env_gradients plot show_gradient = TRUE. Default “temperature_C”. legend title derived name (underscores replaced spaces title‑cased).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_spatial_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the spatial sampling simulation (domain, individuals, quadrats, optional gradient) — plot_spatial_sampling","text":"ggplot object can modified (themes, scales, etc.).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_spatial_sampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the spatial sampling simulation (domain, individuals, quadrats, optional gradient) — plot_spatial_sampling","text":"Colors species drawn colorspace sequential_hcl palette “RdPu” (reversed) mapped unique species present. layers plotted current display CRS provided sf objects; ensure consistent CRS across inputs. show_gradient = TRUE, raster drawn first partial transparency domain outline points remain visible.","code":""},{"path":[]},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/plot_species_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Species-Area Relationship (SAR) — plot_species_area","title":"Plot Species-Area Relationship (SAR) — plot_species_area","text":"Plots mean species accumulation (species-area) curve ribbon denoting +/-1 standard deviation across permutations, based summary returned calculate_species_area.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_species_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Species-Area Relationship (SAR) — plot_species_area","text":"","code":"plot_species_area(sar_data)"},{"path":"https://ajsmit.github.io/spesim/reference/plot_species_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Species-Area Relationship (SAR) — plot_species_area","text":"sar_data data frame columns Sites (number quadrats sampled), Richness (mean cumulative richness), SD (standard deviation across permutations).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_species_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Species-Area Relationship (SAR) — plot_species_area","text":"ggplot object.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/plot_species_area.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Species-Area Relationship (SAR) — plot_species_area","text":"curve represents expected richness sampling effort increases; uncertainty displayed semi-transparent ribbon.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/plot_species_area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Species-Area Relationship (SAR) — plot_species_area","text":"","code":"if (FALSE) { # \\dontrun{ sar <- calculate_species_area(abund_matrix) plot_species_area(sar) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/print_interactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty-print a compact interaction matrix summary — print_interactions","title":"Pretty-print a compact interaction matrix summary — print_interactions","text":"Prints radius sorted list non-1.0 coefficients interaction matrix.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/print_interactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty-print a compact interaction matrix summary — print_interactions","text":"","code":"print_interactions(I, digits = 3, top_n = NULL)"},{"path":"https://ajsmit.github.io/spesim/reference/print_interactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty-print a compact interaction matrix summary — print_interactions","text":"list radius matrix. digits Integer; number digits print. top_n Integer; show many non-1.0 entries.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/print_interactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty-print a compact interaction matrix summary — print_interactions","text":"Invisibly returns NULL.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/print_interactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pretty-print a compact interaction matrix summary — print_interactions","text":"","code":"if (FALSE) { # \\dontrun{ print_interactions(I, digits = 3, top_n = 20) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/read_latest_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the most recent simulation report from an output directory — read_latest_report","title":"Read the most recent simulation report from an output directory — read_latest_report","text":"Convenience helper locate read latest *_report.txt written run_spatial_simulation(write_outputs = TRUE) given output_dir. Useful users want report text without calling generate_full_report() directly.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/read_latest_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the most recent simulation report from an output directory — read_latest_report","text":"","code":"read_latest_report(output_dir = \"out\")"},{"path":"https://ajsmit.github.io/spesim/reference/read_latest_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the most recent simulation report from an output directory — read_latest_report","text":"output_dir Directory search. set OUTPUT_PREFIX init file something like \"/run\", pass \"\" (default). function searches recursively files matching _report.txt.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/read_latest_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the most recent simulation report from an output directory — read_latest_report","text":"single character scalar containing report contents.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/read_latest_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the most recent simulation report from an output directory — read_latest_report","text":"","code":"if (FALSE) { # \\dontrun{ txt <- read_latest_report(\"out\") cat(txt) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/rthomas_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Thomas Process (Rcpp-backed) in an arbitrary polygon — rthomas_fast","title":"Fast Thomas Process (Rcpp-backed) in an arbitrary polygon — rthomas_fast","text":"Simulate \\(n\\_target\\) points Thomas (Gaussian Neyman–Scott) process, using fast C++ generator domain's bounding box filtering polygon sf. drop-replacement spatstat-based Thomas simulator substantially faster large simulations.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/rthomas_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Thomas Process (Rcpp-backed) in an arbitrary polygon — rthomas_fast","text":"","code":"rthomas_fast(   domain,   n_target,   kappa = NULL,   mu = 10,   sigma = 1,   oversample = 1.3 )"},{"path":"https://ajsmit.github.io/spesim/reference/rthomas_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast Thomas Process (Rcpp-backed) in an arbitrary polygon — rthomas_fast","text":"domain sf polygon/multipolygon defining study area (projected CRS recommended). n_target Integer, desired number retained points inside domain. kappa Optional parent intensity (parents per unit area). NULL, derived n_target, mu, domain area. mu Mean offspring per parent (Poisson). sigma Gaussian cluster scale (standard deviation offspring displacement; map units). oversample Scalar \\(> 1\\). Multiplier used request enough raw offspring bbox , polygon filtering, still retain n_target. Default 1.3.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/rthomas_fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast Thomas Process (Rcpp-backed) in an arbitrary polygon — rthomas_fast","text":"sf POINT layer exactly n_target rows (feasible), fewer kappa/mu small generate enough points.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/rthomas_fast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast Thomas Process (Rcpp-backed) in an arbitrary polygon — rthomas_fast","text":"Let \\(A_D\\) polygon area \\(A_B\\) bbox area. expected fraction bbox points survive polygon filter \\(f \\approx A_D / A_B\\). request roughly n_target / f points C++ (times oversample), filter, finally thin (short) resample replacement return exactly n_target. prefer strict “replacement”, set oversample higher supply larger kappa.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/rthomas_fast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast Thomas Process (Rcpp-backed) in an arbitrary polygon — rthomas_fast","text":"","code":"if (FALSE) { # \\dontrun{ dom <- create_sampling_domain() pts <- rthomas_fast(dom, n_target = 2000, mu = 10, sigma = 1) plot(sf::st_geometry(pts), pch = 16, cex = 0.4) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/run_spatial_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the full spatial sampling simulation — run_spatial_simulation","title":"Run the full spatial sampling simulation — run_spatial_simulation","text":"End--end runner can called two ways: . File-driven (legacy / CLI-friendly) Provide init_file (optionally interactions_file). function reads configuration via load_config(), simulates community, places quadrats, builds tables figures, writes disk output_prefix (timestamped), returns results list. Interactions can supplied () via interactions_file, (ii) putting INTERACTIONS_FILE = path//file init file, (iii) embedding inline rules INTERACTIONS_EDGELIST = c(\",B-D,0.8\", \"C,,1.2\", \"E,*,0.95\") directly init file. B. Programmatic (used README) Provide -memory parameter list P (typically load_config()) sf polygon domain (let function create one). Interactions resolved arguments fields inside P: may pass external interactions_file, set P$INTERACTIONS_FILE (pointer), set P$INTERACTIONS_EDGELIST (inline rules). default write_outputs = TRUE, files written; set write_outputs = FALSE skip writing just get results list back. Internally : resolves parameters (P) optional interspecific interactions, simulates heterogeneous community (point process + environment), places sampling quadrats using requested scheme, compiles site \\(\\times\\) species tables per-site environment, (optionally) writes 2\\(\\times\\)2 map panel advanced multi-plot panel, (optionally) appends human-readable text report, returns named results list.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/run_spatial_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the full spatial sampling simulation — run_spatial_simulation","text":"","code":"run_spatial_simulation(   init_file = NULL,   interactions_file = NULL,   output_prefix = NULL,   domain = NULL,   P = NULL,   write_outputs = TRUE,   interactions_validate = TRUE,   interactions_strict = TRUE,   interactions_print = TRUE,   interactions_top_n = 20 )"},{"path":"https://ajsmit.github.io/spesim/reference/run_spatial_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the full spatial sampling simulation — run_spatial_simulation","text":"init_file Character path text configuration (KEY = value). supplied, takes precedence P/domain inputs (file-driven mode). See load_config() supported keys. interactions_file Optional character path separate interactions config. NULL, function look inside init file (P) either INTERACTIONS_FILE (pointer) INTERACTIONS_EDGELIST (inline rules). Falls back neutral interactions (1s; radius 0) nothing provided. output_prefix Base path outputs (timestamp appended). NULL, derives P$OUTPUT_PREFIX defaults \"simulation_output\". Ignored write_outputs = FALSE. domain Optional sf polygon (study area). NULL, default domain created create_sampling_domain(). Ignored file-driven mode init_file provided (domain still created unless supply ). P Optional fully materialized parameter list (often load_config()). init_file given, P used -. write_outputs Logical; write CSVs/figures/report disk? Default TRUE. interactions_validate Logical; validate resolved interaction matrix validate_interactions() (default TRUE). interactions_strict Logical; validation finds problems, stop error (TRUE) just warn (FALSE). Default TRUE. interactions_print Logical; pretty-print compact summary interaction matrix print_interactions() (default TRUE). interactions_top_n Integer; cap number non-1.0 entries shown pretty-printer. Default 20.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/run_spatial_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the full spatial sampling simulation — run_spatial_simulation","text":"named list components: P – resolved parameters domain – sf polygon(s) study area species_dist – sf points species attached env columns quadrats – sf polygons sampled quadrats env_gradients – data.frame grid environmental fields abund_matrix – site \\(\\times\\) species table (first column site) site_coords – data.frame site, x, y (quadrat centroids) write_outputs = TRUE, files written disk output_prefix.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/run_spatial_simulation.html","id":"files-written-when-write-outputs-true-","dir":"Reference","previous_headings":"","what":"Files written (when write_outputs = TRUE)","title":"Run the full spatial sampling simulation — run_spatial_simulation","text":"*_abundances.csv – site \\(\\times\\) species matrix *_environments.csv – mean environment per quadrat *_quadrat_centroids.csv – centroids table *_fig_panel.png – 2\\(\\times\\)2 spatial panel *_fig_advanced_panel.png – advanced diagnostics (enabled) *_report.txt – textual analysis report","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/run_spatial_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run the full spatial sampling simulation — run_spatial_simulation","text":"","code":"if (FALSE) { # \\dontrun{ ## A) File-driven run_spatial_simulation(   init_file = \"inst/examples/spesim_init_complete.txt\",   interactions_file = NULL,   output_prefix = \"out/run\" )  ## B) Programmatic (as in README) dom <- create_sampling_domain() init <- system.file(\"examples\", \"spesim_init_complete.txt\", package = \"spesim\") P <- load_config(init) res <- run_spatial_simulation(   domain = dom, P = P,   interactions_file = NULL,   write_outputs = FALSE ) str(res$abund_matrix) } # }"},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_dispatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispatch simulation by process kind — simulate_points_dispatch","title":"Dispatch simulation by process kind — simulate_points_dispatch","text":"small internal router calls one simulators: \"poisson\" — homogeneous Poisson (uniform) via sf::st_sample() \"thomas\"  — parent–offspring clustering \"strauss\" — soft inhibition (sequential acceptance) \"geyer\"   — saturation model (sequential acceptance)","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_dispatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispatch simulation by process kind — simulate_points_dispatch","text":"","code":"simulate_points_dispatch(kind, domain, n_target, args = list())"},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_dispatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispatch simulation by process kind — simulate_points_dispatch","text":"kind Character scalar: one \"poisson\", \"thomas\", \"strauss\", \"geyer\" (case-insensitive). domain sf polygon/multipolygon sampling window. n_target Integer target number points. args Named list extra parameters, described .","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_dispatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dispatch simulation by process kind — simulate_points_dispatch","text":"sf POINT layer (attributes).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_dispatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dispatch simulation by process kind — simulate_points_dispatch","text":"Arguments given process can supplied via args using either generic names (beta, mu, sigma, gamma, r, sat) package’s config-style names (A_PARENT_INTENSITY, A_MEAN_OFFSPRING, A_CLUSTER_SCALE, OTHERS_BETA, OTHERS_GAMMA, OTHERS_R, OTHERS_S).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_geyer.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate locations via a Geyer-like saturation process (spatstat-free) — simulate_points_geyer","title":"Simulate locations via a Geyer-like saturation process (spatstat-free) — simulate_points_geyer","text":"Implements simple sequential acceptance sampler: propose candidate points uniformly inside domain. Let k number already-accepted points within radius r. Accept probability \\(\\gamma^{\\min(k, s)}\\), \\(\\gamma\\) interaction parameter \\(s\\) saturation count. \\(\\gamma > 1\\), rule induces clustering \\(s\\) neighbours (values \\(< 1\\) yield inhibition).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_geyer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate locations via a Geyer-like saturation process (spatstat-free) — simulate_points_geyer","text":"","code":"simulate_points_geyer(   domain,   n_target,   beta = NULL,   gamma = 1.5,   r = 1,   sat = 2 )"},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_geyer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate locations via a Geyer-like saturation process (spatstat-free) — simulate_points_geyer","text":"domain sf polygon/multipolygon. n_target Integer target number points. beta Unused placeholder (kept API compatibility). gamma Interaction parameter (numeric). \\(\\gamma > 1\\) encourages clustering; \\(\\gamma < 1\\) encourages inhibition. r Interaction radius (map units). sat Saturation count (non-negative integer).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_geyer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate locations via a Geyer-like saturation process (spatstat-free) — simulate_points_geyer","text":"sf POINT layer (attributes).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_geyer_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Geyer saturation simulator (bbox Metropolis–Hastings) — simulate_points_geyer_fast","title":"Fast Geyer saturation simulator (bbox Metropolis–Hastings) — simulate_points_geyer_fast","text":"Fast Geyer saturation simulator (bbox Metropolis–Hastings)","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_geyer_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Geyer saturation simulator (bbox Metropolis–Hastings) — simulate_points_geyer_fast","text":"","code":"simulate_points_geyer_fast(   domain,   n_target,   r,   gamma,   sat,   sweeps = 2000,   burnin = 200,   thin = 1 )"},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_geyer_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast Geyer saturation simulator (bbox Metropolis–Hastings) — simulate_points_geyer_fast","text":"domain sf polygon/multipolygon defining window (bbox used). n_target integer, number points return. r interaction radius. gamma interaction parameter (<1 inhibition, >1 clustering). sat saturation count (positive integer). sweeps MH sweeps (per point). burnin burn-sweeps. thin unused (reserved).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_geyer_fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast Geyer saturation simulator (bbox Metropolis–Hastings) — simulate_points_geyer_fast","text":"sf POINT layer n_target points.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_strauss.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate locations via a Strauss-like (soft inhibition) process — simulate_points_strauss","title":"Simulate locations via a Strauss-like (soft inhibition) process — simulate_points_strauss","text":"Implements simple sequential acceptance sampler: propose candidate points uniformly inside domain. Let k number already-accepted points within radius r. Accept probability \\(\\gamma^{k}\\) (\\(0 < \\gamma \\le 1\\)); otherwise reject. Repeat n_target points max iteration budget.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_strauss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate locations via a Strauss-like (soft inhibition) process — simulate_points_strauss","text":"","code":"simulate_points_strauss(domain, n_target, beta = NULL, gamma = 0.2, r = 1)"},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_strauss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate locations via a Strauss-like (soft inhibition) process — simulate_points_strauss","text":"domain sf polygon/multipolygon. n_target Integer target number points. beta Unused placeholder (kept API compatibility). gamma Inhibition strength (0–1). Smaller values increase inhibition. r Interaction radius (map units).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_strauss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate locations via a Strauss-like (soft inhibition) process — simulate_points_strauss","text":"sf POINT layer (attributes).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_strauss_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast Strauss simulator (Rcpp backend) returning an sf point layer — simulate_points_strauss_fast","title":"Fast Strauss simulator (Rcpp backend) returning an sf point layer — simulate_points_strauss_fast","text":"Fixed-\\(n\\) Metropolis–Hastings sampler Strauss process interaction radius r parameter gamma (\\(0<\\gamma\\le 1\\)). Uses cell grid, cached neighbor counts, squared-distance checks, light auto-tuning proposal radius. fast, self-contained alternative spatstat baseline point generation.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_strauss_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast Strauss simulator (Rcpp backend) returning an sf point layer — simulate_points_strauss_fast","text":"","code":"simulate_points_strauss_fast(   domain,   n_target,   r,   gamma,   sweeps = 2000,   burnin = 200,   thin = 1,   step0 = NA_real_,   target_acc = 0.35,   tune_every = 200 )"},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_strauss_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast Strauss simulator (Rcpp backend) returning an sf point layer — simulate_points_strauss_fast","text":"domain sf polygon/multipolygon defining window. n_target Integer; number points return. r Interaction radius (map units). gamma Interaction parameter (\\(\\le 1\\) inhibition). sweeps Number MH sweeps (proposals per point). Default 2000. burnin Number initial sweeps reserved adaptation. Default 200. thin Currently unused (kept API symmetry). Default 1. step0 Optional initial proposal radius (defaults 0.5 * r). target_acc Target acceptance auto-tuning. Default 0.35. tune_every Sweeps tuning updates. Default 200.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_strauss_fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast Strauss simulator (Rcpp backend) returning an sf point layer — simulate_points_strauss_fast","text":"sf POINT layer n_target rows.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_thomas.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate point locations via a Thomas (Gaussian Neyman–Scott) process — simulate_points_thomas","title":"Simulate point locations via a Thomas (Gaussian Neyman–Scott) process — simulate_points_thomas","text":"Parent–offspring clustering without external dependencies: parents sampled uniformly inside domain; parent produces \\(\\text{Pois}(\\mu)\\) offspring displaced isotropic Gaussian noise sd sigma. Offspring clipped domain. result thinned/replicated match n_target.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_thomas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate point locations via a Thomas (Gaussian Neyman–Scott) process — simulate_points_thomas","text":"","code":"simulate_points_thomas(domain, n_target, kappa = NULL, mu = 10, sigma = 1)"},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_thomas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate point locations via a Thomas (Gaussian Neyman–Scott) process — simulate_points_thomas","text":"domain sf polygon/multipolygon. n_target Integer target number points. kappa Optional numeric parent intensity (parents per unit area). NULL, value derived hit n_target given mu. mu Mean offspring per parent. sigma Cluster scale (Gaussian sd, map units).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/simulate_points_thomas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate point locations via a Thomas (Gaussian Neyman–Scott) process — simulate_points_thomas","text":"sf POINT layer (attributes).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/spesim-package.html","id":null,"dir":"Reference","previous_headings":"","what":"spesim: Spatial Sampling Simulation for Heterogeneous Ecological Communities — spesim-package","title":"spesim: Spatial Sampling Simulation for Heterogeneous Ecological Communities — spesim-package","text":"Simulate visualise spatial community sampling within irregular domain. Species distributions generated Fisher log-series can include environmental filtering (multiple gradients), dominant-species clustering, local interspecific interactions. Multiple quadrat placement schemes provided (random, tiled, systematic, transect, Voronoi) emulate common field designs. package writes site--species abundance matrices per-quadrat environmental summaries, produces publication-quality maps analysis panels (rank–abundance, occupancy– abundance, species–area, distance–decay, rarefaction). single high-level runner orchestrates full workflow configuration files figures human-readable report.","code":""},{"path":[]},{"path":"https://ajsmit.github.io/spesim/reference/spesim-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"spesim: Spatial Sampling Simulation for Heterogeneous Ecological Communities — spesim-package","text":"Maintainer: AJ Smit ajsmit@uwc.ac.za (ORCID)","code":""},{"path":"https://ajsmit.github.io/spesim/reference/validate_interactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate an interaction specification — validate_interactions","title":"Validate an interaction specification — validate_interactions","text":"Checks resolved interaction list (radius + matrix) well formed given species set. Warns errors shape/NA/finite/name issues.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/validate_interactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate an interaction specification — validate_interactions","text":"","code":"validate_interactions(I, spp_names, stop_on_error = FALSE)"},{"path":"https://ajsmit.github.io/spesim/reference/validate_interactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate an interaction specification — validate_interactions","text":"list elements radius (numeric scalar) matrix (S×S numeric). spp_names Character vector expected species names (e.g., LETTERS[1:S]). stop_on_error Logical; stop validation failure (TRUE) just warn (FALSE).","code":""},{"path":"https://ajsmit.github.io/spesim/reference/validate_interactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate an interaction specification — validate_interactions","text":"Invisibly returns TRUE success.","code":""},{"path":"https://ajsmit.github.io/spesim/reference/validate_interactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate an interaction specification — validate_interactions","text":"","code":"if (FALSE) { # \\dontrun{ I <- list(radius = 2, matrix = diag(10)) validate_interactions(I, LETTERS[1:10]) } # }"}]
